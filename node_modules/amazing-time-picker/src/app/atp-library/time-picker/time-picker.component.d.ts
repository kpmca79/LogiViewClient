import { OnInit } from '@angular/core';
import { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';
import { AtpCoreService } from '../atp-core.service';
import { ITime } from '../definitions';
import * as ɵngcc0 from '@angular/core';
export declare class TimePickerComponent implements OnInit {
    private core;
    _ref: any;
    subject: any;
    activeModal: boolean;
    timerElement: any;
    clockObject: Array<any>;
    isClicked: boolean;
    clockType: 'minute' | 'hour';
    time: ITime;
    nowTime: any;
    degree: any;
    config: TimePickerConfig;
    appRef: any;
    isPopup: boolean;
    allowed: any;
    preference: IDisplayPreference;
    changeToMin: boolean;
    private animationTime;
    constructor(core: AtpCoreService);
    ParseStringToTime(time: string): void;
    GetTime(): void;
    clockMaker: () => void;
    setActiveTime: () => void;
    setArrow: (obj: any) => void;
    rotationClass: (degrees: any) => void;
    setTime(): void;
    getDegree: (ele: any) => void;
    private GetNowTime(hour, ampm, minute);
    checkBet(): void;
    modalAnimation(): void;
    ngOnInit(): void;
    MinuteClick(): boolean;
    HourClick(): boolean;
    ChangeAnimational(type: 'minute' | 'hour'): void;
    SetAM(): boolean;
    SetPM(): boolean;
    Close(e: any): void;
    getClockArrowStyle(): {};
    getAnimationTime(): string;
    /**
     * Event on clock mouse click down
     * @param event - captured event
     */
    updateClockDown(event: any): void;
    setNewRotation(): void;
    GetSeparator(): string;
    GetPeriod(period: 'AM' | 'PM'): any;
    GetMinute(): any;
    GetHour(): any;
    GetClockTime(clock: IClockNumber): any;
    GetLabel(key: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimePickerComponent, "time-picker", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWUtcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDbG9ja051bWJlciwgSURpc3BsYXlQcmVmZXJlbmNlLCBUaW1lUGlja2VyQ29uZmlnIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgQXRwQ29yZVNlcnZpY2UgfSBmcm9tICcuLi9hdHAtY29yZS5zZXJ2aWNlJztcbmltcG9ydCB7IElUaW1lIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBjb3JlO1xuICAgIF9yZWY6IGFueTtcbiAgICBzdWJqZWN0OiBhbnk7XG4gICAgYWN0aXZlTW9kYWw6IGJvb2xlYW47XG4gICAgdGltZXJFbGVtZW50OiBhbnk7XG4gICAgY2xvY2tPYmplY3Q6IEFycmF5PGFueT47XG4gICAgaXNDbGlja2VkOiBib29sZWFuO1xuICAgIGNsb2NrVHlwZTogJ21pbnV0ZScgfCAnaG91cic7XG4gICAgdGltZTogSVRpbWU7XG4gICAgbm93VGltZTogYW55O1xuICAgIGRlZ3JlZTogYW55O1xuICAgIGNvbmZpZzogVGltZVBpY2tlckNvbmZpZztcbiAgICBhcHBSZWY6IGFueTtcbiAgICBpc1BvcHVwOiBib29sZWFuO1xuICAgIGFsbG93ZWQ6IGFueTtcbiAgICBwcmVmZXJlbmNlOiBJRGlzcGxheVByZWZlcmVuY2U7XG4gICAgY2hhbmdlVG9NaW46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhbmltYXRpb25UaW1lO1xuICAgIGNvbnN0cnVjdG9yKGNvcmU6IEF0cENvcmVTZXJ2aWNlKTtcbiAgICBQYXJzZVN0cmluZ1RvVGltZSh0aW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIEdldFRpbWUoKTogdm9pZDtcbiAgICBjbG9ja01ha2VyOiAoKSA9PiB2b2lkO1xuICAgIHNldEFjdGl2ZVRpbWU6ICgpID0+IHZvaWQ7XG4gICAgc2V0QXJyb3c6IChvYmo6IGFueSkgPT4gdm9pZDtcbiAgICByb3RhdGlvbkNsYXNzOiAoZGVncmVlczogYW55KSA9PiB2b2lkO1xuICAgIHNldFRpbWUoKTogdm9pZDtcbiAgICBnZXREZWdyZWU6IChlbGU6IGFueSkgPT4gdm9pZDtcbiAgICBwcml2YXRlIEdldE5vd1RpbWUoaG91ciwgYW1wbSwgbWludXRlKTtcbiAgICBjaGVja0JldCgpOiB2b2lkO1xuICAgIG1vZGFsQW5pbWF0aW9uKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBNaW51dGVDbGljaygpOiBib29sZWFuO1xuICAgIEhvdXJDbGljaygpOiBib29sZWFuO1xuICAgIENoYW5nZUFuaW1hdGlvbmFsKHR5cGU6ICdtaW51dGUnIHwgJ2hvdXInKTogdm9pZDtcbiAgICBTZXRBTSgpOiBib29sZWFuO1xuICAgIFNldFBNKCk6IGJvb2xlYW47XG4gICAgQ2xvc2UoZTogYW55KTogdm9pZDtcbiAgICBnZXRDbG9ja0Fycm93U3R5bGUoKToge307XG4gICAgZ2V0QW5pbWF0aW9uVGltZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRXZlbnQgb24gY2xvY2sgbW91c2UgY2xpY2sgZG93blxuICAgICAqIEBwYXJhbSBldmVudCAtIGNhcHR1cmVkIGV2ZW50XG4gICAgICovXG4gICAgdXBkYXRlQ2xvY2tEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNldE5ld1JvdGF0aW9uKCk6IHZvaWQ7XG4gICAgR2V0U2VwYXJhdG9yKCk6IHN0cmluZztcbiAgICBHZXRQZXJpb2QocGVyaW9kOiAnQU0nIHwgJ1BNJyk6IGFueTtcbiAgICBHZXRNaW51dGUoKTogYW55O1xuICAgIEdldEhvdXIoKTogYW55O1xuICAgIEdldENsb2NrVGltZShjbG9jazogSUNsb2NrTnVtYmVyKTogYW55O1xuICAgIEdldExhYmVsKGtleTogc3RyaW5nKTogYW55O1xufVxuIl19