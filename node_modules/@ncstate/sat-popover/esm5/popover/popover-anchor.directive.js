/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';
import { SatPopover } from './popover.component';
import { getInvalidPopoverError } from './popover.errors';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
var SatPopoverAnchor = /** @class */ (function () {
    function SatPopoverAnchor(_elementRef, _viewContainerRef, _anchoring) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    Object.defineProperty(SatPopoverAnchor.prototype, "attachedPopover", {
        /** Reference to the popover instance. */
        get: /**
         * Reference to the popover instance.
         * @return {?}
         */
        function () { return this._attachedPopover; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._validateAttachedPopover(value);
            this._attachedPopover = value;
            // Anchor the popover to the element ref
            this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this._elementRef);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SatPopoverAnchor.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Re-emit open and close events
        /** @type {?} */
        var opened$ = this._anchoring.popoverOpened
            .pipe(tap((/**
         * @return {?}
         */
        function () { return _this.popoverOpened.emit(); })));
        /** @type {?} */
        var closed$ = this._anchoring.popoverClosed
            .pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.popoverClosed.emit(value); })));
        merge(opened$, closed$).pipe(takeUntil(this._onDestroy)).subscribe();
    };
    /**
     * @return {?}
     */
    SatPopoverAnchor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /** Gets whether the popover is presently open. */
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    SatPopoverAnchor.prototype.isPopoverOpen = /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    function () {
        return this._anchoring.isPopoverOpen();
    };
    /** Toggles the popover between the open and closed states. */
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    SatPopoverAnchor.prototype.togglePopover = /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    function () {
        this._anchoring.togglePopover();
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    SatPopoverAnchor.prototype.openPopover = /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        this._anchoring.openPopover(options);
    };
    /** Closes the popover. */
    /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    SatPopoverAnchor.prototype.closePopover = /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        this._anchoring.closePopover(value);
    };
    /** Realign the popover to the anchor. */
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    SatPopoverAnchor.prototype.realignPopover = /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    function () {
        this._anchoring.realignPopoverToAnchor();
    };
    /** Get a reference to the anchor element. */
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    SatPopoverAnchor.prototype.getElement = /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    function () {
        return this._elementRef;
    };
    /** Throws an error if the popover instance is not provided. */
    /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    SatPopoverAnchor.prototype._validateAttachedPopover = /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    function (popover) {
        if (!popover || !(popover instanceof SatPopover)) {
            throw getInvalidPopoverError();
        }
    };
    SatPopoverAnchor.decorators = [
        { type: Directive, args: [{
                    selector: '[satPopoverAnchorFor]',
                    exportAs: 'satPopoverAnchor',
                    providers: [SatPopoverAnchoringService],
                },] }
    ];
    /** @nocollapse */
    SatPopoverAnchor.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: SatPopoverAnchoringService }
    ]; };
    SatPopoverAnchor.propDecorators = {
        attachedPopover: [{ type: Input, args: ['satPopoverAnchorFor',] }],
        popoverOpened: [{ type: Output }],
        popoverClosed: [{ type: Output }]
    };
    return SatPopoverAnchor;
}());
export { SatPopoverAnchor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._attachedPopover;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverClosed;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._viewContainerRef;
    /** @type {?} */
    SatPopoverAnchor.prototype._anchoring;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hbmNob3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5jc3RhdGUvc2F0LXBvcG92ZXIvIiwic291cmNlcyI6WyJwb3BvdmVyL3BvcG92ZXItYW5jaG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR3pFO0lBMkJFLDBCQUNVLFdBQXVCLEVBQ3ZCLGlCQUFtQyxFQUNwQyxVQUFzQztRQUZyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO1FBQ3BDLGVBQVUsR0FBVixVQUFVLENBQTRCOzs7O1FBWHJDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7OztRQUd6QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFHMUMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNckMsQ0FBQztJQXZCTCxzQkFDSSw2Q0FBZTtRQUZuQix5Q0FBeUM7Ozs7O1FBQ3pDLGNBQ3dCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDdkQsVUFBb0IsS0FBaUI7WUFDbkMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtB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Qyx1Q0FBK0I7Ozs7O0lBQy9CLDZDQUEyQzs7SUFDM0Msc0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTYXRQb3BvdmVyIH0gZnJvbSAnLi9wb3BvdmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRJbnZhbGlkUG9wb3ZlckVycm9yIH0gZnJvbSAnLi9wb3BvdmVyLmVycm9ycyc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyQW5jaG9yaW5nU2VydmljZSB9IGZyb20gJy4vcG9wb3Zlci1hbmNob3Jpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyT3Blbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NhdFBvcG92ZXJBbmNob3JGb3JdJyxcbiAgZXhwb3J0QXM6ICdzYXRQb3BvdmVyQW5jaG9yJyxcbiAgcHJvdmlkZXJzOiBbU2F0UG9wb3ZlckFuY2hvcmluZ1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBTYXRQb3BvdmVyQW5jaG9yIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBvcG92ZXIgaW5zdGFuY2UuICovXG4gIEBJbnB1dCgnc2F0UG9wb3ZlckFuY2hvckZvcicpXG4gIGdldCBhdHRhY2hlZFBvcG92ZXIoKSB7IHJldHVybiB0aGlzLl9hdHRhY2hlZFBvcG92ZXI7IH1cbiAgc2V0IGF0dGFjaGVkUG9wb3Zlcih2YWx1ZTogU2F0UG9wb3Zlcikge1xuICAgIHRoaXMuX3ZhbGlkYXRlQXR0YWNoZWRQb3BvdmVyKHZhbHVlKTtcbiAgICB0aGlzLl9hdHRhY2hlZFBvcG92ZXIgPSB2YWx1ZTtcbiAgICAvLyBBbmNob3IgdGhlIHBvcG92ZXIgdG8gdGhlIGVsZW1lbnQgcmVmXG4gICAgdGhpcy5fYW5jaG9yaW5nLmFuY2hvcih0aGlzLmF0dGFjaGVkUG9wb3ZlciwgdGhpcy5fdmlld0NvbnRhaW5lclJlZiwgdGhpcy5fZWxlbWVudFJlZik7XG4gIH1cbiAgcHJpdmF0ZSBfYXR0YWNoZWRQb3BvdmVyOiBTYXRQb3BvdmVyO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBwb3BvdmVyIGlzIG9wZW5lZC4gKi9cbiAgQE91dHB1dCgpIHBvcG92ZXJPcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqIEVtaXRzIHdoZW4gdGhlIHBvcG92ZXIgaXMgY2xvc2VkLiAqL1xuICBAT3V0cHV0KCkgcG9wb3ZlckNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBkaXJlY3RpdmUgaXMgZGVzdHJveWVkLiAqL1xuICBwcml2YXRlIF9vbkRlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwdWJsaWMgX2FuY2hvcmluZzogU2F0UG9wb3ZlckFuY2hvcmluZ1NlcnZpY2UsXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gUmUtZW1pdCBvcGVuIGFuZCBjbG9zZSBldmVudHNcbiAgICBjb25zdCBvcGVuZWQkID0gdGhpcy5fYW5jaG9yaW5nLnBvcG92ZXJPcGVuZWRcbiAgICAgIC5waXBlKHRhcCgoKSA9PiB0aGlzLnBvcG92ZXJPcGVuZWQuZW1pdCgpKSk7XG4gICAgY29uc3QgY2xvc2VkJCA9IHRoaXMuX2FuY2hvcmluZy5wb3BvdmVyQ2xvc2VkXG4gICAgICAucGlwZSh0YXAodmFsdWUgPT4gdGhpcy5wb3BvdmVyQ2xvc2VkLmVtaXQodmFsdWUpKSk7XG4gICAgbWVyZ2Uob3BlbmVkJCwgY2xvc2VkJCkucGlwZSh0YWtlVW50aWwodGhpcy5fb25EZXN0cm95KSkuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9vbkRlc3Ryb3kubmV4dCgpO1xuICAgIHRoaXMuX29uRGVzdHJveS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqIEdldHMgd2hldGhlciB0aGUgcG9wb3ZlciBpcyBwcmVzZW50bHkgb3Blbi4gKi9cbiAgaXNQb3BvdmVyT3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYW5jaG9yaW5nLmlzUG9wb3Zlck9wZW4oKTtcbiAgfVxuXG4gIC8qKiBUb2dnbGVzIHRoZSBwb3BvdmVyIGJldHdlZW4gdGhlIG9wZW4gYW5kIGNsb3NlZCBzdGF0ZXMuICovXG4gIHRvZ2dsZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5fYW5jaG9yaW5nLnRvZ2dsZVBvcG92ZXIoKTtcbiAgfVxuXG4gIC8qKiBPcGVucyB0aGUgcG9wb3Zlci4gKi9cbiAgb3BlblBvcG92ZXIob3B0aW9uczogU2F0UG9wb3Zlck9wZW5PcHRpb25zID0ge30pOiB2b2lkIHtcbiAgICB0aGlzLl9hbmNob3Jpbmcub3BlblBvcG92ZXIob3B0aW9ucyk7XG4gIH1cblxuICAvKiogQ2xvc2VzIHRoZSBwb3BvdmVyLiAqL1xuICBjbG9zZVBvcG92ZXIodmFsdWU/OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9hbmNob3JpbmcuY2xvc2VQb3BvdmVyKHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBSZWFsaWduIHRoZSBwb3BvdmVyIHRvIHRoZSBhbmNob3IuICovXG4gIHJlYWxpZ25Qb3BvdmVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2FuY2hvcmluZy5yZWFsaWduUG9wb3ZlclRvQW5jaG9yKCk7XG4gIH1cblxuICAvKiogR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBhbmNob3IgZWxlbWVudC4gKi9cbiAgZ2V0RWxlbWVudCgpOiBFbGVtZW50UmVmIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZjtcbiAgfVxuXG4gIC8qKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHBvcG92ZXIgaW5zdGFuY2UgaXMgbm90IHByb3ZpZGVkLiAqL1xuICBwcml2YXRlIF92YWxpZGF0ZUF0dGFjaGVkUG9wb3Zlcihwb3BvdmVyOiBTYXRQb3BvdmVyKTogdm9pZCB7XG4gICAgaWYgKCFwb3BvdmVyIHx8ICEocG9wb3ZlciBpbnN0YW5jZW9mIFNhdFBvcG92ZXIpKSB7XG4gICAgICB0aHJvdyBnZXRJbnZhbGlkUG9wb3ZlckVycm9yKCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==