/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { of, Subject } from 'rxjs';
import { delay, switchMap, takeUntil } from 'rxjs/operators';
import { SatPopoverAnchor } from './popover.component';
var SatPopoverHoverDirective = /** @class */ (function () {
    function SatPopoverHoverDirective(anchor) {
        this.anchor = anchor;
        this._satPopoverHover = 0;
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
        /**
         * Emits when the user's mouse enters the element.
         */
        this._onMouseEnter = new Subject();
        /**
         * Emits when the user's mouse leaves the element.
         */
        this._onMouseLeave = new Subject();
    }
    Object.defineProperty(SatPopoverHoverDirective.prototype, "satPopoverHover", {
        /**
         * Amount of time to delay (ms) after hovering starts before
         * the popover opens. Defaults to 0ms.
         */
        get: /**
         * Amount of time to delay (ms) after hovering starts before
         * the popover opens. Defaults to 0ms.
         * @return {?}
         */
        function () { return this._satPopoverHover; },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._satPopoverHover = coerceNumberProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SatPopoverHoverDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Whenever the user hovers this host element, delay the configured
        // amount of time and open the popover. Terminate if the mouse leaves
        // the host element before the delay is complete.
        this._onMouseEnter
            .pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return of(null).pipe(delay(_this._satPopoverHover || 0), takeUntil(_this._onMouseLeave));
        })), takeUntil(this._onDestroy))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.anchor.popover.open(); }));
    };
    /**
     * @return {?}
     */
    SatPopoverHoverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /**
     * @return {?}
     */
    SatPopoverHoverDirective.prototype.showPopover = /**
     * @return {?}
     */
    function () {
        this._onMouseEnter.next();
    };
    /**
     * @return {?}
     */
    SatPopoverHoverDirective.prototype.closePopover = /**
     * @return {?}
     */
    function () {
        this._onMouseLeave.next();
        this.anchor.popover.close();
    };
    SatPopoverHoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[satPopoverHover]'
                },] }
    ];
    /** @nocollapse */
    SatPopoverHoverDirective.ctorParameters = function () { return [
        { type: SatPopoverAnchor }
    ]; };
    SatPopoverHoverDirective.propDecorators = {
        satPopoverHover: [{ type: Input }],
        showPopover: [{ type: HostListener, args: ['mouseenter',] }],
        closePopover: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return SatPopoverHoverDirective;
}());
export { SatPopoverHoverDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._satPopoverHover;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onDestroy;
    /**
     * Emits when the user's mouse enters the element.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onMouseEnter;
    /**
     * Emits when the user's mouse leaves the element.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onMouseLeave;
    /** @type {?} */
    SatPopoverHoverDirective.prototype.anchor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1ob3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvcG9wb3Zlci1ob3Zlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQ7SUF3QkUsa0NBQW1CLE1BQXdCO1FBQXhCLFdBQU0sR0FBTixNQUFNLENBQWtCO1FBWG5DLHFCQUFnQixHQUFHLENBQUMsQ0FBQzs7OztRQUdyQixlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQzs7OztRQUczQixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7Ozs7UUFHcEMsa0JBQWEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRUcsQ0FBQztJQWhCaEQsc0JBQ0kscURBQWU7UUFMbkI7OztXQUdHOzs7Ozs7UUFDSCxjQUN3QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Ozs7O1FBQ3ZELFVBQW9CLEdBQVc7WUFDN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELENBQUM7OztPQUhzRDs7OztJQWlCdkQsa0RBQWU7OztJQUFmO1FBQUEsaUJBZUM7UUFkQyxtRUFBbUU7UUFDbkUscUVBQXFFO1FBQ3JFLGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsYUFBYTthQUNmLElBQUksQ0FDSCxTQUFTOzs7UUFBQztZQUNSLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDbEIsS0FBSyxDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsRUFDakMsU0FBUyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FDOUIsQ0FBQztRQUNKLENBQUMsRUFBQyxFQUNGLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQzNCO2FBQ0EsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUExQixDQUEwQixFQUFDLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELDhDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBR0QsOENBQVc7OztJQURYO1FBRUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBR0QsK0NBQVk7OztJQURaO1FBRUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDOztnQkF6REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzs7O2dCQUpRLGdCQUFnQjs7O2tDQVV0QixLQUFLOzhCQXdDTCxZQUFZLFNBQUMsWUFBWTsrQkFLekIsWUFBWSxTQUFDLFlBQVk7O0lBSzVCLCtCQUFDO0NBQUEsQUExREQsSUEwREM7U0F2RFksd0JBQXdCOzs7Ozs7SUFVbkMsb0RBQTZCOzs7Ozs7SUFHN0IsOENBQW1DOzs7Ozs7SUFHbkMsaURBQTRDOzs7Ozs7SUFHNUMsaURBQTRDOztJQUVoQywwQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5LCBzd2l0Y2hNYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgU2F0UG9wb3ZlckFuY2hvciB9IGZyb20gJy4vcG9wb3Zlci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2F0UG9wb3ZlckhvdmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgU2F0UG9wb3ZlckhvdmVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IChtcykgYWZ0ZXIgaG92ZXJpbmcgc3RhcnRzIGJlZm9yZVxuICAgKiB0aGUgcG9wb3ZlciBvcGVucy4gRGVmYXVsdHMgdG8gMG1zLlxuICAgKi9cbiAgQElucHV0KClcbiAgZ2V0IHNhdFBvcG92ZXJIb3ZlcigpIHsgcmV0dXJuIHRoaXMuX3NhdFBvcG92ZXJIb3ZlcjsgfVxuICBzZXQgc2F0UG9wb3ZlckhvdmVyKHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2F0UG9wb3ZlckhvdmVyID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsKTtcbiAgfVxuICBwcml2YXRlIF9zYXRQb3BvdmVySG92ZXIgPSAwO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBkaXJlY3RpdmUgaXMgZGVzdHJveWVkLiAqL1xuICBwcml2YXRlIF9vbkRlc3Ryb3kgPSBuZXcgU3ViamVjdCgpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSB1c2VyJ3MgbW91c2UgZW50ZXJzIHRoZSBlbGVtZW50LiAqL1xuICBwcml2YXRlIF9vbk1vdXNlRW50ZXIgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSB1c2VyJ3MgbW91c2UgbGVhdmVzIHRoZSBlbGVtZW50LiAqL1xuICBwcml2YXRlIF9vbk1vdXNlTGVhdmUgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhbmNob3I6IFNhdFBvcG92ZXJBbmNob3IpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyBXaGVuZXZlciB0aGUgdXNlciBob3ZlcnMgdGhpcyBob3N0IGVsZW1lbnQsIGRlbGF5IHRoZSBjb25maWd1cmVkXG4gICAgLy8gYW1vdW50IG9mIHRpbWUgYW5kIG9wZW4gdGhlIHBvcG92ZXIuIFRlcm1pbmF0ZSBpZiB0aGUgbW91c2UgbGVhdmVzXG4gICAgLy8gdGhlIGhvc3QgZWxlbWVudCBiZWZvcmUgdGhlIGRlbGF5IGlzIGNvbXBsZXRlLlxuICAgIHRoaXMuX29uTW91c2VFbnRlclxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG9mKG51bGwpLnBpcGUoXG4gICAgICAgICAgICBkZWxheSh0aGlzLl9zYXRQb3BvdmVySG92ZXIgfHwgMCksXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5fb25Nb3VzZUxlYXZlKSxcbiAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuX29uRGVzdHJveSksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuYW5jaG9yLnBvcG92ZXIub3BlbigpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX29uRGVzdHJveS5uZXh0KCk7XG4gICAgdGhpcy5fb25EZXN0cm95LmNvbXBsZXRlKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgc2hvd1BvcG92ZXIoKSB7XG4gICAgdGhpcy5fb25Nb3VzZUVudGVyLm5leHQoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKVxuICBjbG9zZVBvcG92ZXIoKSB7XG4gICAgdGhpcy5fb25Nb3VzZUxlYXZlLm5leHQoKTtcbiAgICB0aGlzLmFuY2hvci5wb3BvdmVyLmNsb3NlKCk7XG4gIH1cbn1cbiJdfQ==