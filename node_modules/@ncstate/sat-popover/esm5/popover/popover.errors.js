/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { VALID_HORIZ_ALIGN, VALID_VERT_ALIGN, VALID_SCROLL } from './types';
/**
 * @return {?}
 */
export function getUnanchoredPopoverError() {
    return Error('SatPopover does not have an anchor.');
}
/**
 * @return {?}
 */
export function getInvalidPopoverAnchorError() {
    return Error('SatPopover#anchor must be an instance of SatPopoverAnchor, ElementRef, or HTMLElement.');
}
/**
 * @return {?}
 */
export function getInvalidPopoverError() {
    return Error('SatPopoverAnchor#satPopoverAnchor must be an instance of SatPopover.');
}
/**
 * @return {?}
 */
export function getInvalidSatPopoverAnchorError() {
    return Error("SatPopoverAnchor must be associated with a " +
        "SatPopover component. " +
        "Examples: <sat-popover [anchor]=\"satPopoverAnchorTemplateRef\"> or " +
        "<button satPopoverAnchor [satPopoverAnchor]=\"satPopoverTemplateRef\">");
}
/**
 * @param {?} alignment
 * @return {?}
 */
export function getInvalidHorizontalAlignError(alignment) {
    return Error(generateGenericError('horizontalAlign/xAlign', alignment, VALID_HORIZ_ALIGN));
}
/**
 * @param {?} alignment
 * @return {?}
 */
export function getInvalidVerticalAlignError(alignment) {
    return Error(generateGenericError('verticalAlign/yAlign', alignment, VALID_VERT_ALIGN));
}
/**
 * @param {?} strategy
 * @return {?}
 */
export function getInvalidScrollStrategyError(strategy) {
    return Error(generateGenericError('scrollStrategy', strategy, VALID_SCROLL));
}
/**
 * @param {?} apiName
 * @param {?} invalid
 * @param {?} valid
 * @return {?}
 */
function generateGenericError(apiName, invalid, valid) {
    return "Invalid " + apiName + ": '" + invalid + "'. Valid options are " + valid.map((/**
     * @param {?} v
     * @return {?}
     */
    function (v) { return "'" + v + "'"; })).join(', ') + ".";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5lcnJvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvcG9wb3Zlci5lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7QUFFNUUsTUFBTSxVQUFVLHlCQUF5QjtJQUN2QyxPQUFPLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7Ozs7QUFFRCxNQUFNLFVBQVUsNEJBQTRCO0lBQzFDLE9BQU8sS0FBSyxDQUFDLHdGQUF3RixDQUFDLENBQUM7QUFDekcsQ0FBQzs7OztBQUVELE1BQU0sVUFBVSxzQkFBc0I7SUFDcEMsT0FBTyxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztBQUN2RixDQUFDOzs7O0FBRUQsTUFBTSxVQUFVLCtCQUErQjtJQUM3QyxPQUFPLEtBQUssQ0FDViw2Q0FBNkM7UUFDM0Msd0JBQXdCO1FBQ3hCLHNFQUFvRTtRQUNwRSx3RUFBc0UsQ0FDekUsQ0FBQztBQUNKLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUFDLFNBQVM7SUFDdEQsT0FBTyxLQUFLLENBQUMsb0JBQW9CLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztBQUM3RixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxTQUFTO0lBQ3BELE9BQU8sS0FBSyxDQUFDLG9CQUFvQixDQUFDLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDMUYsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsNkJBQTZCLENBQUMsUUFBUTtJQUNwRCxPQUFPLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUMvRSxDQUFDOzs7Ozs7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxPQUFlLEVBQUUsT0FBWSxFQUFFLEtBQWU7SUFDMUUsT0FBTyxhQUFXLE9BQU8sV0FBTSxPQUFPLDZCQUF3QixLQUFLLENBQUMsR0FBRzs7OztJQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsTUFBSSxDQUFDLE1BQUcsRUFBUixDQUFRLEVBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUcsQ0FBQztBQUN2RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVkFMSURfSE9SSVpfQUxJR04sIFZBTElEX1ZFUlRfQUxJR04sIFZBTElEX1NDUk9MTCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5hbmNob3JlZFBvcG92ZXJFcnJvcigpOiBFcnJvciB7XG4gIHJldHVybiBFcnJvcignU2F0UG9wb3ZlciBkb2VzIG5vdCBoYXZlIGFuIGFuY2hvci4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmFsaWRQb3BvdmVyQW5jaG9yRXJyb3IoKTogRXJyb3Ige1xuICByZXR1cm4gRXJyb3IoJ1NhdFBvcG92ZXIjYW5jaG9yIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgU2F0UG9wb3ZlckFuY2hvciwgRWxlbWVudFJlZiwgb3IgSFRNTEVsZW1lbnQuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZhbGlkUG9wb3ZlckVycm9yKCk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKCdTYXRQb3BvdmVyQW5jaG9yI3NhdFBvcG92ZXJBbmNob3IgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBTYXRQb3BvdmVyLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52YWxpZFNhdFBvcG92ZXJBbmNob3JFcnJvcigpOiBFcnJvciB7XG4gIHJldHVybiBFcnJvcihcbiAgICBgU2F0UG9wb3ZlckFuY2hvciBtdXN0IGJlIGFzc29jaWF0ZWQgd2l0aCBhIGAgK1xuICAgICAgYFNhdFBvcG92ZXIgY29tcG9uZW50LiBgICtcbiAgICAgIGBFeGFtcGxlczogPHNhdC1wb3BvdmVyIFthbmNob3JdPVwic2F0UG9wb3ZlckFuY2hvclRlbXBsYXRlUmVmXCI+IG9yIGAgK1xuICAgICAgYDxidXR0b24gc2F0UG9wb3ZlckFuY2hvciBbc2F0UG9wb3ZlckFuY2hvcl09XCJzYXRQb3BvdmVyVGVtcGxhdGVSZWZcIj5gXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZhbGlkSG9yaXpvbnRhbEFsaWduRXJyb3IoYWxpZ25tZW50KTogRXJyb3Ige1xuICByZXR1cm4gRXJyb3IoZ2VuZXJhdGVHZW5lcmljRXJyb3IoJ2hvcml6b250YWxBbGlnbi94QWxpZ24nLCBhbGlnbm1lbnQsIFZBTElEX0hPUklaX0FMSUdOKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZhbGlkVmVydGljYWxBbGlnbkVycm9yKGFsaWdubWVudCk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKGdlbmVyYXRlR2VuZXJpY0Vycm9yKCd2ZXJ0aWNhbEFsaWduL3lBbGlnbicsIGFsaWdubWVudCwgVkFMSURfVkVSVF9BTElHTikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52YWxpZFNjcm9sbFN0cmF0ZWd5RXJyb3Ioc3RyYXRlZ3kpOiBFcnJvciB7XG4gIHJldHVybiBFcnJvcihnZW5lcmF0ZUdlbmVyaWNFcnJvcignc2Nyb2xsU3RyYXRlZ3knLCBzdHJhdGVneSwgVkFMSURfU0NST0xMKSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR2VuZXJpY0Vycm9yKGFwaU5hbWU6IHN0cmluZywgaW52YWxpZDogYW55LCB2YWxpZDogc3RyaW5nW10pOiBzdHJpbmcge1xuICByZXR1cm4gYEludmFsaWQgJHthcGlOYW1lfTogJyR7aW52YWxpZH0nLiBWYWxpZCBvcHRpb25zIGFyZSAke3ZhbGlkLm1hcCh2ID0+IGAnJHt2fSdgKS5qb2luKCcsICcpfS5gO1xufVxuIl19