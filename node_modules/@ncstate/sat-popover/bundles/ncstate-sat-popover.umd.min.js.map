{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ncstate/sat-popover/popover/popover.animations.ts","ng://@ncstate/sat-popover/popover/types.ts","ng://@ncstate/sat-popover/popover/popover.errors.ts","ng://@ncstate/sat-popover/popover/popover-anchoring.service.ts","ng://@ncstate/sat-popover/popover/popover.component.ts","ng://@ncstate/sat-popover/popover/popover-hover.directive.ts","ng://@ncstate/sat-popover/popover/popover.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","transformPopover","trigger","transition","style","opacity","transform","animate","VALID_SCROLL","VALID_HORIZ_ALIGN","VALID_VERT_ALIGN","generateGenericError","apiName","invalid","valid","map","v","join","SatPopoverAnchoringService","_overlay","_ngZone","_dir","this","popoverOpened","Subject","popoverClosed","_popoverOpen","_onDestroy","prototype","ngOnDestroy","_destroyPopover","_notificationsSubscription","unsubscribe","_positionChangeSubscription","complete","anchor","popover","viewContainerRef","_popover","_viewContainerRef","_overlayRef","_anchor","ElementRef","nativeElement","getConfig","setOrigin","updatePosition","isPopoverOpen","togglePopover","closePopover","openPopover","options","_applyOpenOptions","_createOverlay","_subscribeToBackdrop","_subscribeToEscape","_subscribeToDetachments","_saveOpenedState","_saveClosedState","detach","repositionPopover","updatePopoverConfig","_destroyPopoverOnceClosed","realignPopoverToAnchor","reapplyLastPosition","getAnchorElement","restoreFocus","_restoreFocusOverride","autoFocus","_autoFocusOverride","_portal","TemplatePortal","_templateRef","popoverConfig","horizontalAlign","verticalAlign","hasBackdrop","backdropClass","scrollStrategy","forceAlignment","lockAlignment","overlayConfig","_getOverlayConfig","_subscribeToPositionChanges","create","attach","dispose","_this","detachments","pipe","take","takeUntil","subscribe","backdropClick","tap","backdropClicked","emit","filter","interactiveClose","keydownEvents","event","overlayKeydown","keyCode","ESCAPE","_open","opened","closed","_getDirection","config","OverlayConfig","positionStrategy","_getPositionStrategy","_getScrollStrategyInstance","direction","position","positionChanges","change","run","_setAlignmentClasses","h","getHorizontalPopoverAlignment","connectionPair","overlayX","getVerticalPopoverAlignment","overlayY","strategy","scrollStrategies","block","reposition","close","noop","horizontalTarget","verticalTarget","positions","getPosition","flexibleConnectedTo","withFlexibleDimensions","withPush","withViewportMargin","withLockedPosition","fallbacks","_getFallbacks","apply","arguments","length","concat","__spread","withPositions","hTarget","vTarget","possibleVerticalAlignments","prioritizeAroundTarget","forEach","slice","Injectable","Overlay","NgZone","Directionality","decorators","type","Optional","_a","originX","getHorizontalConnectionPosPair","_b","originY","getVerticalConnectionPosPair","ConnectionPositionPair","target","targetIndex","indexOf","reordered","left","right","reverse","pop","DEFAULT_TRANSITION","SatPopoverAnchor","elementRef","Object","defineProperty","val","SatPopover","Error","ngAfterViewInit","Directive","args","selector","exportAs","ViewContainerRef","Input","_focusTrapFactory","_anchoringService","_document","_horizontalAlign","_verticalAlign","_forceAlignment","_lockAlignment","_autoFocus","_restoreFocus","_scrollStrategy","_hasBackdrop","_interactiveClose","_openTransition","_closeTransition","EventEmitter","afterOpen","afterClose","_classList","HTMLElement","_validateHorizontalAlign","_validateVerticalAlign","coercedVal","coerceBooleanProperty","_validateScrollStrategy","ngOnInit","open","toggle","realign","isOpen","setCustomAnchor","viewContainer","el","_getAnimation","params","openTransition","closeTransition","_onAnimationDone","toState","_trapFocus","_restoreFocusAndDestroyTrap","horizAlign","vertAlign","_savePreviouslyFocusedElement","_focusTrapElement","_focusTrap","focusInitialElementWhenReady","toFocus","_previouslyFocusedElement","focus","destroy","undefined","pos","getInvalidScrollStrategyError","Component","encapsulation","ViewEncapsulation","None","animations","template","providers","FocusTrapFactory","Inject","DOCUMENT","Output","ViewChild","TemplateRef","static","SatPopoverHoverDirective","_satPopoverHover","_onMouseEnter","_onMouseLeave","coerceNumberProperty","switchMap","of","delay","showPopover","HostListener","SatPopoverModule","NgModule","imports","CommonModule","OverlayModule","A11yModule","BidiModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport const transformPopover: AnimationTriggerMetadata = trigger('transformPopover', [\n  transition(':enter', [\n    style({opacity: 0, transform: 'scale(0.3)'}),\n    animate('{{openTransition}}',\n      style({opacity: 1, transform: 'scale(1)'}))\n  ]),\n  transition(':leave', [\n    animate('{{closeTransition}}',\n      style({opacity: 0, transform: 'scale(0.5)'}))\n  ])\n]);\n","export type SatPopoverScrollStrategy = 'noop' | 'block' | 'reposition' | 'close';\nexport const VALID_SCROLL: SatPopoverScrollStrategy[] = [\n  'noop',\n  'block',\n  'reposition',\n  'close'\n];\n\nexport type SatPopoverHorizontalAlign = 'before' | 'start' | 'center' | 'end' | 'after';\nexport const VALID_HORIZ_ALIGN: SatPopoverHorizontalAlign[] = [\n  'before',\n  'start',\n  'center',\n  'end',\n  'after'\n];\n\nexport type SatPopoverVerticalAlign = 'above'  | 'start' | 'center' | 'end' | 'below';\nexport const VALID_VERT_ALIGN: SatPopoverVerticalAlign[] = [\n  'above',\n  'start',\n  'center',\n  'end',\n  'below'\n];\n\nexport interface SatPopoverOpenOptions {\n  /**\n   * Whether the popover should return focus to the previously focused element after\n   * closing. Defaults to true.\n   */\n  restoreFocus?: boolean;\n\n  /** Whether the first focusable element should be focused on open. Defaults to true. */\n  autoFocus?: boolean;\n}\n","import { VALID_HORIZ_ALIGN, VALID_VERT_ALIGN, VALID_SCROLL } from './types';\n\nexport function getUnanchoredPopoverError(): Error {\n  return Error('SatPopover does not have an anchor.');\n}\n\nexport function getInvalidPopoverAnchorError(): Error {\n  return Error('SatPopover#anchor must be an instance of SatPopoverAnchor, ElementRef, or HTMLElement.');\n}\n\nexport function getInvalidPopoverError(): Error {\n  return Error('SatPopoverAnchor#satPopoverAnchor must be an instance of SatPopover.');\n}\n\nexport function getInvalidSatPopoverAnchorError(): Error {\n  return Error(\n    `SatPopoverAnchor must be associated with a ` +\n      `SatPopover component. ` +\n      `Examples: <sat-popover [anchor]=\"satPopoverAnchorTemplateRef\"> or ` +\n      `<button satPopoverAnchor [satPopoverAnchor]=\"satPopoverTemplateRef\">`\n  );\n}\n\nexport function getInvalidHorizontalAlignError(alignment): Error {\n  return Error(generateGenericError('horizontalAlign/xAlign', alignment, VALID_HORIZ_ALIGN));\n}\n\nexport function getInvalidVerticalAlignError(alignment): Error {\n  return Error(generateGenericError('verticalAlign/yAlign', alignment, VALID_VERT_ALIGN));\n}\n\nexport function getInvalidScrollStrategyError(strategy): Error {\n  return Error(generateGenericError('scrollStrategy', strategy, VALID_SCROLL));\n}\n\nfunction generateGenericError(apiName: string, invalid: any, valid: string[]): string {\n  return `Invalid ${apiName}: '${invalid}'. Valid options are ${valid.map(v => `'${v}'`).join(', ')}.`;\n}\n","import {\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef\n} from '@angular/core';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport { Directionality, Direction} from '@angular/cdk/bidi';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subscription, Subject } from 'rxjs';\nimport { takeUntil, take, filter, tap } from 'rxjs/operators';\n\nimport { SatPopover } from './popover.component';\nimport {\n  SatPopoverHorizontalAlign,\n  SatPopoverVerticalAlign,\n  SatPopoverScrollStrategy,\n  SatPopoverOpenOptions,\n} from './types';\n\n/**\n * Configuration provided by the popover for the anchoring service\n * to build the correct overlay config.\n */\ninterface PopoverConfig {\n  horizontalAlign: SatPopoverHorizontalAlign;\n  verticalAlign: SatPopoverVerticalAlign;\n  hasBackdrop: boolean;\n  backdropClass: string;\n  scrollStrategy: SatPopoverScrollStrategy;\n  forceAlignment: boolean;\n  lockAlignment: boolean;\n}\n\n@Injectable()\nexport class SatPopoverAnchoringService implements OnDestroy {\n\n  /** Emits when the popover is opened. */\n  popoverOpened = new Subject<void>();\n\n  /** Emits when the popover is closed. */\n  popoverClosed = new Subject<void>();\n\n  /** Reference to the overlay containing the popover component. */\n  _overlayRef: OverlayRef;\n\n  /** Reference to the target popover. */\n  private _popover: SatPopover;\n\n  /** Reference to the view container for the popover template. */\n  private _viewContainerRef: ViewContainerRef;\n\n  /** Reference to the anchor element. */\n  private _anchor: HTMLElement;\n\n  /** Reference to a template portal where the overlay will be attached. */\n  private _portal: TemplatePortal<any>;\n\n  /** Single subscription to notifications service events. */\n  private _notificationsSubscription: Subscription;\n\n  /** Single subscription to position changes. */\n  private _positionChangeSubscription: Subscription;\n\n  /** Whether the popover is presently open. */\n  private _popoverOpen = false;\n\n  /** Emits when the service is destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _ngZone: NgZone,\n    @Optional() private _dir: Directionality\n  ) { }\n\n  ngOnDestroy() {\n    // Destroy popover before terminating subscriptions so that any resulting\n    // detachments update 'closed state'\n    this._destroyPopover();\n\n    // Terminate subscriptions\n    if (this._notificationsSubscription) {\n      this._notificationsSubscription.unsubscribe();\n    }\n    if (this._positionChangeSubscription) {\n      this._positionChangeSubscription.unsubscribe();\n    }\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    this.popoverOpened.complete();\n    this.popoverClosed.complete();\n  }\n\n  /** Anchor a popover instance to a view and connection element. */\n  anchor(\n    popover: SatPopover,\n    viewContainerRef: ViewContainerRef,\n    anchor: ElementRef | HTMLElement\n  ): void {\n    // If we're just changing the anchor element and the overlayRef already exists,\n    // simply update the existing _overlayRef's anchor.\n    if (\n      this._popover === popover &&\n      this._viewContainerRef === viewContainerRef &&\n      this._overlayRef\n    ) {\n      this._anchor = anchor instanceof ElementRef\n        ? anchor.nativeElement\n        : anchor;\n      const config = this._overlayRef.getConfig();\n      const strategy = config.positionStrategy as FlexibleConnectedPositionStrategy;\n      strategy.setOrigin(this._anchor);\n      this._overlayRef.updatePosition();\n      return;\n    }\n\n    // Destroy any previous popovers\n    this._destroyPopover();\n\n    // Assign local refs\n    this._popover = popover;\n    this._viewContainerRef = viewContainerRef;\n    this._anchor = anchor instanceof ElementRef\n      ? anchor.nativeElement\n      : anchor;\n  }\n\n  /** Gets whether the popover is presently open. */\n  isPopoverOpen(): boolean {\n    return this._popoverOpen;\n  }\n\n  /** Toggles the popover between the open and closed states. */\n  togglePopover(): void {\n    return this._popoverOpen ? this.closePopover() : this.openPopover();\n  }\n\n  /** Opens the popover. */\n  openPopover(options: SatPopoverOpenOptions = {}): void {\n    if (!this._popoverOpen) {\n      this._applyOpenOptions(options);\n      this._createOverlay();\n      this._subscribeToBackdrop();\n      this._subscribeToEscape();\n      this._subscribeToDetachments();\n      this._saveOpenedState();\n    }\n  }\n\n  /** Closes the popover. */\n  closePopover(value?: any): void {\n    if (this._overlayRef) {\n      this._saveClosedState(value);\n      this._overlayRef.detach();\n    }\n  }\n\n  /** TODO: implement when the overlay's position can be dynamically changed */\n  repositionPopover(): void {\n    this.updatePopoverConfig();\n  }\n\n  /** TODO: when the overlay's position can be dynamically changed, do not destroy */\n  updatePopoverConfig(): void {\n    this._destroyPopoverOnceClosed();\n  }\n\n  /** Realign the popover to the anchor. */\n  realignPopoverToAnchor(): void {\n    if (this._overlayRef) {\n      const config = this._overlayRef.getConfig();\n      const strategy = config.positionStrategy as FlexibleConnectedPositionStrategy;\n      strategy.reapplyLastPosition();\n    }\n  }\n\n  /** Get a reference to the anchor element. */\n  getAnchorElement(): HTMLElement {\n    return this._anchor;\n  }\n\n  /** Apply behavior properties on the popover based on the open options. */\n  private _applyOpenOptions(options: SatPopoverOpenOptions): void {\n    // Only override restoreFocus as `false` if the option is explicitly `false`\n    const restoreFocus = options.restoreFocus !== false;\n    this._popover._restoreFocusOverride = restoreFocus;\n\n    // Only override autoFocus as `false` if the option is explicitly `false`\n    const autoFocus = options.autoFocus !== false;\n    this._popover._autoFocusOverride = autoFocus;\n  }\n\n  /** Create an overlay to be attached to the portal. */\n  private _createOverlay(): OverlayRef {\n    // Create overlay if it doesn't yet exist\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this._popover._templateRef, this._viewContainerRef);\n\n      const popoverConfig = {\n        horizontalAlign: this._popover.horizontalAlign,\n        verticalAlign: this._popover.verticalAlign,\n        hasBackdrop: this._popover.hasBackdrop,\n        backdropClass: this._popover.backdropClass,\n        scrollStrategy: this._popover.scrollStrategy,\n        forceAlignment: this._popover.forceAlignment,\n        lockAlignment: this._popover.lockAlignment,\n      };\n\n      const overlayConfig = this._getOverlayConfig(popoverConfig, this._anchor);\n\n      this._subscribeToPositionChanges(\n        overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy\n      );\n\n      this._overlayRef = this._overlay.create(overlayConfig);\n    }\n\n    // Actually open the popover\n    this._overlayRef.attach(this._portal);\n    return this._overlayRef;\n  }\n\n\n  /** Removes the popover from the DOM. Does NOT update open state. */\n  private _destroyPopover(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  /**\n   * Destroys the popover immediately if it is closed, or waits until it\n   * has been closed to destroy it.\n   */\n  private _destroyPopoverOnceClosed(): void {\n    if (this.isPopoverOpen() && this._overlayRef) {\n      this._overlayRef.detachments().pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => this._destroyPopover());\n    } else {\n      this._destroyPopover();\n    }\n  }\n\n  /** Close popover when backdrop is clicked. */\n  private _subscribeToBackdrop(): void {\n    this._overlayRef\n      .backdropClick()\n      .pipe(\n        tap(() => this._popover.backdropClicked.emit()),\n        filter(() => this._popover.interactiveClose),\n        takeUntil(this.popoverClosed),\n        takeUntil(this._onDestroy),\n      )\n      .subscribe(() => this.closePopover());\n  }\n\n  /** Close popover when escape keydown event occurs. */\n  private _subscribeToEscape(): void {\n    this._overlayRef\n      .keydownEvents()\n      .pipe(\n        tap(event => this._popover.overlayKeydown.emit(event)),\n        filter(event => event.keyCode === ESCAPE),\n        filter(() => this._popover.interactiveClose),\n        takeUntil(this.popoverClosed),\n        takeUntil(this._onDestroy),\n      )\n      .subscribe(() => this.closePopover());\n  }\n\n  /** Set state back to closed when detached. */\n  private _subscribeToDetachments(): void {\n    this._overlayRef\n      .detachments()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => this._saveClosedState());\n  }\n\n  /** Save the opened state of the popover and emit. */\n  private _saveOpenedState(): void {\n    if (!this._popoverOpen) {\n      this._popover._open = this._popoverOpen = true;\n\n      this.popoverOpened.next();\n      this._popover.opened.emit();\n    }\n  }\n\n  /** Save the closed state of the popover and emit. */\n  private _saveClosedState(value?: any): void {\n    if (this._popoverOpen) {\n      this._popover._open = this._popoverOpen = false;\n\n      this.popoverClosed.next(value);\n      this._popover.closed.emit(value);\n    }\n  }\n\n  /** Gets the text direction of the containing app. */\n  private _getDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Create and return a config for creating the overlay. */\n  private _getOverlayConfig(config: PopoverConfig, anchor: HTMLElement): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPositionStrategy(\n        config.horizontalAlign,\n        config.verticalAlign,\n        config.forceAlignment,\n        config.lockAlignment,\n        anchor,\n      ),\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._getScrollStrategyInstance(config.scrollStrategy),\n      direction: this._getDirection(),\n    });\n  }\n\n  /**\n   * Listen to changes in the position of the overlay and set the correct alignment classes,\n   * ensuring that the animation origin is correct, even with a fallback position.\n   */\n  private _subscribeToPositionChanges(position: FlexibleConnectedPositionStrategy): void {\n    if (this._positionChangeSubscription) {\n      this._positionChangeSubscription.unsubscribe();\n    }\n\n    this._positionChangeSubscription = position.positionChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(change => {\n        // Position changes may occur outside the Angular zone\n        this._ngZone.run(() => {\n          this._popover._setAlignmentClasses(\n            getHorizontalPopoverAlignment(change.connectionPair.overlayX),\n            getVerticalPopoverAlignment(change.connectionPair.overlayY),\n          );\n        });\n      });\n  }\n\n  /** Map a scroll strategy string type to an instance of a scroll strategy. */\n  private _getScrollStrategyInstance(strategy: SatPopoverScrollStrategy): ScrollStrategy {\n    switch (strategy) {\n      case 'block':\n        return this._overlay.scrollStrategies.block();\n      case 'reposition':\n        return this._overlay.scrollStrategies.reposition();\n      case 'close':\n        return this._overlay.scrollStrategies.close();\n      case 'noop':\n      default:\n        return this._overlay.scrollStrategies.noop();\n    }\n  }\n\n  /** Create and return a position strategy based on config provided to the component instance. */\n  private _getPositionStrategy(\n    horizontalTarget: SatPopoverHorizontalAlign,\n    verticalTarget: SatPopoverVerticalAlign,\n    forceAlignment: boolean,\n    lockAlignment: boolean,\n    anchor: HTMLElement,\n  ): FlexibleConnectedPositionStrategy {\n    // Attach the overlay at the preferred position\n    const targetPosition = getPosition(horizontalTarget, verticalTarget);\n    const positions = [targetPosition];\n\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(anchor)\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withViewportMargin(0)\n      .withLockedPosition(lockAlignment);\n\n    // Unless the alignment is forced, add fallbacks based on the preferred positions\n    if (!forceAlignment) {\n      const fallbacks = this._getFallbacks(horizontalTarget, verticalTarget);\n      positions.push(...fallbacks);\n    }\n\n    return strategy.withPositions(positions);\n  }\n\n  /** Get fallback positions based around target alignments. */\n  private _getFallbacks(\n    hTarget: SatPopoverHorizontalAlign,\n    vTarget: SatPopoverVerticalAlign\n  ): ConnectionPositionPair[] {\n    // Determine if the target alignments overlap the anchor\n    const horizontalOverlapAllowed = hTarget !== 'before' && hTarget !== 'after';\n    const verticalOverlapAllowed = vTarget !== 'above' && vTarget !== 'below';\n\n    // If a target alignment doesn't cover the anchor, don't let any of the fallback alignments\n    // cover the anchor\n    const possibleHorizontalAlignments: SatPopoverHorizontalAlign[] =\n      horizontalOverlapAllowed ?\n        ['before', 'start', 'center', 'end', 'after'] :\n        ['before', 'after'];\n    const possibleVerticalAlignments: SatPopoverVerticalAlign[] =\n      verticalOverlapAllowed ?\n        ['above', 'start', 'center', 'end', 'below'] :\n        ['above', 'below'];\n\n    // Create fallbacks for each allowed prioritized fallback alignment combo\n    const fallbacks: ConnectionPositionPair[] = [];\n    prioritizeAroundTarget(hTarget, possibleHorizontalAlignments).forEach(h => {\n      prioritizeAroundTarget(vTarget, possibleVerticalAlignments).forEach(v => {\n        fallbacks.push(getPosition(h, v));\n      });\n    });\n\n    // Remove the first item since it will be the target alignment and isn't considered a fallback\n    return fallbacks.slice(1, fallbacks.length);\n  }\n\n}\n\n/** Helper function to get a cdk position pair from SatPopover alignments. */\nfunction getPosition(\n  h: SatPopoverHorizontalAlign,\n  v: SatPopoverVerticalAlign,\n): ConnectionPositionPair {\n  const {originX, overlayX} = getHorizontalConnectionPosPair(h);\n  const {originY, overlayY} = getVerticalConnectionPosPair(v);\n  return new ConnectionPositionPair({originX, originY}, {overlayX, overlayY});\n}\n\n/** Helper function to convert an overlay connection position to equivalent popover alignment. */\nfunction getHorizontalPopoverAlignment(h: HorizontalConnectionPos): SatPopoverHorizontalAlign {\n  if (h === 'start') {\n    return 'after';\n  }\n\n  if (h === 'end') {\n    return 'before';\n  }\n\n  return 'center';\n}\n\n/** Helper function to convert an overlay connection position to equivalent popover alignment. */\nfunction getVerticalPopoverAlignment(v: VerticalConnectionPos): SatPopoverVerticalAlign {\n  if (v === 'top') {\n    return 'below';\n  }\n\n  if (v === 'bottom') {\n    return 'above';\n  }\n\n  return 'center';\n}\n\n/** Helper function to convert alignment to origin/overlay position pair. */\nfunction getHorizontalConnectionPosPair(h: SatPopoverHorizontalAlign):\n    {originX: HorizontalConnectionPos, overlayX: HorizontalConnectionPos} {\n  switch (h) {\n    case 'before':\n      return {originX: 'start', overlayX: 'end'};\n    case 'start':\n      return {originX: 'start', overlayX: 'start'};\n    case 'end':\n      return {originX: 'end', overlayX: 'end'};\n    case 'after':\n      return {originX: 'end', overlayX: 'start'};\n    default:\n      return {originX: 'center', overlayX: 'center'};\n  }\n}\n\n/** Helper function to convert alignment to origin/overlay position pair. */\nfunction getVerticalConnectionPosPair(v: SatPopoverVerticalAlign):\n    {originY: VerticalConnectionPos, overlayY: VerticalConnectionPos} {\n  switch (v) {\n    case 'above':\n      return {originY: 'top', overlayY: 'bottom'};\n    case 'start':\n      return {originY: 'top', overlayY: 'top'};\n    case 'end':\n      return {originY: 'bottom', overlayY: 'bottom'};\n    case 'below':\n      return {originY: 'bottom', overlayY: 'top'};\n    default:\n      return {originY: 'center', overlayY: 'center'};\n  }\n}\n\n\n/**\n * Helper function that takes an ordered array options and returns a reorderded\n * array around the target item. e.g.:\n *\n * target: 3; options: [1, 2, 3, 4, 5, 6, 7];\n *\n * return: [3, 4, 2, 5, 1, 6, 7]\n */\nfunction prioritizeAroundTarget<T>(target: T, options: T[]): T[] {\n  const targetIndex = options.indexOf(target);\n\n  // Set the first item to be the target\n  const reordered = [target];\n\n  // Make left and right stacks where the highest priority item is last\n  const left = options.slice(0, targetIndex);\n  const right = options.slice(targetIndex + 1, options.length).reverse();\n\n  // Alternate between stacks until one is empty\n  while (left.length && right.length) {\n    reordered.push(right.pop());\n    reordered.push(left.pop());\n  }\n\n  // Flush out right side\n  while (right.length) {\n    reordered.push(right.pop());\n  }\n\n  // Flush out left side\n  while (left.length) {\n    reordered.push(left.pop());\n  }\n\n  return reordered;\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n  TemplateRef,\n  OnInit,\n  Optional,\n  Output,\n  Directive,\n  ViewContainerRef,\n  AfterViewInit\n} from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { transformPopover } from './popover.animations';\nimport {\n  getUnanchoredPopoverError,\n  getInvalidHorizontalAlignError,\n  getInvalidVerticalAlignError,\n  getInvalidScrollStrategyError,\n  getInvalidPopoverAnchorError,\n  getInvalidSatPopoverAnchorError,\n  getInvalidPopoverError\n} from './popover.errors';\nimport {\n  SatPopoverScrollStrategy,\n  SatPopoverHorizontalAlign,\n  SatPopoverVerticalAlign,\n  VALID_SCROLL,\n  VALID_HORIZ_ALIGN,\n  VALID_VERT_ALIGN,\n  SatPopoverOpenOptions\n} from './types';\nimport { SatPopoverAnchoringService } from './popover-anchoring.service';\n\n// See http://cubic-bezier.com/#.25,.8,.25,1 for reference.\nconst DEFAULT_TRANSITION = '200ms cubic-bezier(0.25, 0.8, 0.25, 1)';\n\n@Directive({\n  selector: '[satPopoverAnchor]',\n  exportAs: 'satPopoverAnchor'\n})\nexport class SatPopoverAnchor implements AfterViewInit {\n  @Input('satPopoverAnchor')\n  get popover() {\n    return this._popover;\n  }\n  set popover(val: SatPopover) {\n    if (val instanceof SatPopover) {\n      val.anchor = this;\n    } else {\n      // when a directive is added with no arguments,\n      // angular assigns `''` as the argument\n      if (val !== '') {\n        throw getInvalidPopoverError();\n      }\n    }\n  }\n\n  /** @internal */\n  _popover: SatPopover;\n\n  constructor(public elementRef: ElementRef, public viewContainerRef: ViewContainerRef) {}\n\n  ngAfterViewInit() {\n    if (!this.popover) {\n      throw getInvalidSatPopoverAnchorError();\n    }\n  }\n}\n\n@Component({\n  selector: 'sat-popover',\n  encapsulation: ViewEncapsulation.None,\n  animations: [transformPopover],\n  styleUrls: ['./popover.component.scss'],\n  templateUrl: './popover.component.html',\n  providers: [SatPopoverAnchoringService]\n})\nexport class SatPopover implements OnInit {\n  /** Anchor element. */\n  @Input()\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(val: SatPopoverAnchor | ElementRef<HTMLElement> | HTMLElement) {\n    if (val instanceof SatPopoverAnchor) {\n      val._popover = this;\n      this._anchoringService.anchor(this, val.viewContainerRef, val.elementRef);\n      this._anchor = val;\n    } else if (val instanceof ElementRef || val instanceof HTMLElement) {\n      this._anchoringService.anchor(this, this._viewContainerRef, val);\n      this._anchor = val;\n    } else if (val) {\n      throw getInvalidPopoverAnchorError();\n    }\n  }\n  private _anchor: SatPopoverAnchor | ElementRef<HTMLElement> | HTMLElement;\n\n  /** Alignment of the popover on the horizontal axis. */\n  @Input()\n  get horizontalAlign() {\n    return this._horizontalAlign;\n  }\n  set horizontalAlign(val: SatPopoverHorizontalAlign) {\n    this._validateHorizontalAlign(val);\n    if (this._horizontalAlign !== val) {\n      this._horizontalAlign = val;\n      this._anchoringService.repositionPopover();\n    }\n  }\n  private _horizontalAlign: SatPopoverHorizontalAlign = 'center';\n\n  /** Alignment of the popover on the x axis. Alias for `horizontalAlign`. */\n  @Input()\n  get xAlign() {\n    return this.horizontalAlign;\n  }\n  set xAlign(val: SatPopoverHorizontalAlign) {\n    this.horizontalAlign = val;\n  }\n\n  /** Alignment of the popover on the vertical axis. */\n  @Input()\n  get verticalAlign() {\n    return this._verticalAlign;\n  }\n  set verticalAlign(val: SatPopoverVerticalAlign) {\n    this._validateVerticalAlign(val);\n    if (this._verticalAlign !== val) {\n      this._verticalAlign = val;\n      this._anchoringService.repositionPopover();\n    }\n  }\n  private _verticalAlign: SatPopoverVerticalAlign = 'center';\n\n  /** Alignment of the popover on the y axis. Alias for `verticalAlign`. */\n  @Input()\n  get yAlign() {\n    return this.verticalAlign;\n  }\n  set yAlign(val: SatPopoverVerticalAlign) {\n    this.verticalAlign = val;\n  }\n\n  /** Whether the popover always opens with the specified alignment. */\n  @Input()\n  get forceAlignment() {\n    return this._forceAlignment;\n  }\n  set forceAlignment(val: boolean) {\n    const coercedVal = coerceBooleanProperty(val);\n    if (this._forceAlignment !== coercedVal) {\n      this._forceAlignment = coercedVal;\n      this._anchoringService.repositionPopover();\n    }\n  }\n  private _forceAlignment = false;\n\n  /**\n   * Whether the popover's alignment is locked after opening. This prevents the popover\n   * from changing its alignement when scrolling or changing the size of the viewport.\n   */\n  @Input()\n  get lockAlignment() {\n    return this._lockAlignment;\n  }\n  set lockAlignment(val: boolean) {\n    const coercedVal = coerceBooleanProperty(val);\n    if (this._lockAlignment !== coercedVal) {\n      this._lockAlignment = coerceBooleanProperty(val);\n      this._anchoringService.repositionPopover();\n    }\n  }\n  private _lockAlignment = false;\n\n  /** Whether the first focusable element should be focused on open. */\n  @Input()\n  get autoFocus() {\n    return this._autoFocus && this._autoFocusOverride;\n  }\n  set autoFocus(val: boolean) {\n    this._autoFocus = coerceBooleanProperty(val);\n  }\n  private _autoFocus = true;\n  _autoFocusOverride = true;\n\n  /** Whether the popover should return focus to the previously focused element after closing. */\n  @Input()\n  get restoreFocus() {\n    return this._restoreFocus && this._restoreFocusOverride;\n  }\n  set restoreFocus(val: boolean) {\n    this._restoreFocus = coerceBooleanProperty(val);\n  }\n  private _restoreFocus = true;\n  _restoreFocusOverride = true;\n\n  /** How the popover should handle scrolling. */\n  @Input()\n  get scrollStrategy() {\n    return this._scrollStrategy;\n  }\n  set scrollStrategy(val: SatPopoverScrollStrategy) {\n    this._validateScrollStrategy(val);\n    if (this._scrollStrategy !== val) {\n      this._scrollStrategy = val;\n      this._anchoringService.updatePopoverConfig();\n    }\n  }\n  private _scrollStrategy: SatPopoverScrollStrategy = 'reposition';\n\n  /** Whether the popover should have a backdrop (includes closing on click). */\n  @Input()\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(val: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(val);\n  }\n  private _hasBackdrop = false;\n\n  /** Whether the popover should close when the user clicks the backdrop or presses ESC. */\n  @Input()\n  get interactiveClose() {\n    return this._interactiveClose;\n  }\n  set interactiveClose(val: boolean) {\n    this._interactiveClose = coerceBooleanProperty(val);\n  }\n  private _interactiveClose = true;\n\n  /** Custom transition to use while opening. */\n  @Input()\n  get openTransition() {\n    return this._openTransition;\n  }\n  set openTransition(val: string) {\n    if (val) {\n      this._openTransition = val;\n    }\n  }\n  private _openTransition = DEFAULT_TRANSITION;\n\n  /** Custom transition to use while closing. */\n  @Input()\n  get closeTransition() {\n    return this._closeTransition;\n  }\n  set closeTransition(val: string) {\n    if (val) {\n      this._closeTransition = val;\n    }\n  }\n  private _closeTransition = DEFAULT_TRANSITION;\n\n  /** Optional backdrop class. */\n  @Input() backdropClass = '';\n\n  /** Emits when the popover is opened. */\n  @Output() opened = new EventEmitter<void>();\n\n  /** Emits when the popover is closed. */\n  @Output() closed = new EventEmitter<any>();\n\n  /** Emits when the popover has finished opening. */\n  @Output() afterOpen = new EventEmitter<void>();\n\n  /** Emits when the popover has finished closing. */\n  @Output() afterClose = new EventEmitter<void>();\n\n  /** Emits when the backdrop is clicked. */\n  @Output() backdropClicked = new EventEmitter<void>();\n\n  /** Emits when a keydown event is targeted to this popover's overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Reference to template so it can be placed within a portal. */\n  @ViewChild(TemplateRef, { static: true }) _templateRef: TemplateRef<any>;\n\n  /** Classes to be added to the popover for setting the correct transform origin. */\n  _classList: any = {};\n\n  /** Whether the popover is presently open. */\n  _open = false;\n\n  /** @internal */\n  _anchoringService: SatPopoverAnchoringService;\n\n  /** Reference to the element to build a focus trap around. */\n  @ViewChild('focusTrapElement', { static: false })\n  private _focusTrapElement: ElementRef;\n\n  /** Reference to the element that was focused before opening. */\n  private _previouslyFocusedElement: HTMLElement;\n\n  /** Reference to a focus trap around the popover. */\n  private _focusTrap: FocusTrap;\n\n  constructor(\n    private _focusTrapFactory: FocusTrapFactory,\n    _anchoringService: SatPopoverAnchoringService,\n    private _viewContainerRef: ViewContainerRef,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    // `@internal` stripping doesn't seem to work if the property is\n    // declared inside the constructor\n    this._anchoringService = _anchoringService;\n  }\n\n  ngOnInit() {\n    this._setAlignmentClasses();\n  }\n\n  /** Open this popover. */\n  open(options: SatPopoverOpenOptions = {}): void {\n    if (this._anchor) {\n      this._anchoringService.openPopover(options);\n      return;\n    }\n\n    throw getUnanchoredPopoverError();\n  }\n\n  /** Close this popover. */\n  close(value?: any): void {\n    this._anchoringService.closePopover(value);\n  }\n\n  /** Toggle this popover open or closed. */\n  toggle(): void {\n    this._anchoringService.togglePopover();\n  }\n\n  /** Realign the popover to the anchor. */\n  realign(): void {\n    this._anchoringService.realignPopoverToAnchor();\n  }\n\n  /** Gets whether the popover is presently open. */\n  isOpen(): boolean {\n    return this._open;\n  }\n\n  /** Allows programmatically setting a custom anchor. */\n  setCustomAnchor(viewContainer: ViewContainerRef, el: ElementRef<HTMLElement> | HTMLElement): void {\n    this._anchor = el;\n    this._anchoringService.anchor(this, viewContainer, el);\n  }\n\n  /** Gets an animation config with customized (or default) transition values. */\n  _getAnimation(): { value: any; params: any } {\n    return {\n      value: 'visible',\n      params: { openTransition: this.openTransition, closeTransition: this.closeTransition }\n    };\n  }\n\n  /** Callback for when the popover is finished animating in or out. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n      this.afterOpen.emit();\n    } else if (event.toState === 'void') {\n      this._restoreFocusAndDestroyTrap();\n      this.afterClose.emit();\n    }\n  }\n\n  /** Apply alignment classes based on alignment inputs. */\n  _setAlignmentClasses(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {\n    this._classList['sat-popover-before'] = horizAlign === 'before' || horizAlign === 'end';\n    this._classList['sat-popover-after'] = horizAlign === 'after' || horizAlign === 'start';\n\n    this._classList['sat-popover-above'] = vertAlign === 'above' || vertAlign === 'end';\n    this._classList['sat-popover-below'] = vertAlign === 'below' || vertAlign === 'start';\n\n    this._classList['sat-popover-center'] = horizAlign === 'center' || vertAlign === 'center';\n  }\n\n  /** Move the focus inside the focus trap and remember where to return later. */\n  private _trapFocus(): void {\n    this._savePreviouslyFocusedElement();\n\n    // There won't be a focus trap element if the close animation starts before open finishes\n    if (!this._focusTrapElement) {\n      return;\n    }\n\n    if (!this._focusTrap && this._focusTrapElement) {\n      this._focusTrap = this._focusTrapFactory.create(this._focusTrapElement.nativeElement);\n    }\n\n    if (this.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restore focus to the element focused before the popover opened. Also destroy trap. */\n  private _restoreFocusAndDestroyTrap(): void {\n    const toFocus = this._previouslyFocusedElement;\n\n    // Must check active element is focusable for IE sake\n    if (toFocus && 'focus' in toFocus && this.restoreFocus) {\n      this._previouslyFocusedElement.focus();\n    }\n\n    this._previouslyFocusedElement = null;\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n      this._focusTrap = undefined;\n    }\n  }\n\n  /** Save a reference to the element focused before the popover was opened. */\n  private _savePreviouslyFocusedElement(): void {\n    if (this._document) {\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n    }\n  }\n\n  /** Throws an error if the alignment is not a valid horizontalAlign. */\n  private _validateHorizontalAlign(pos: SatPopoverHorizontalAlign): void {\n    if (VALID_HORIZ_ALIGN.indexOf(pos) === -1) {\n      throw getInvalidHorizontalAlignError(pos);\n    }\n  }\n\n  /** Throws an error if the alignment is not a valid verticalAlign. */\n  private _validateVerticalAlign(pos: SatPopoverVerticalAlign): void {\n    if (VALID_VERT_ALIGN.indexOf(pos) === -1) {\n      throw getInvalidVerticalAlignError(pos);\n    }\n  }\n\n  /** Throws an error if the scroll strategy is not a valid strategy. */\n  private _validateScrollStrategy(strategy: SatPopoverScrollStrategy): void {\n    if (VALID_SCROLL.indexOf(strategy) === -1) {\n      throw getInvalidScrollStrategyError(strategy);\n    }\n  }\n}\n","import { AfterViewInit, Directive, HostListener, Input, OnDestroy } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { of, Subject } from 'rxjs';\nimport { delay, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { SatPopoverAnchor } from './popover.component';\n\n@Directive({\n  selector: '[satPopoverHover]'\n})\nexport class SatPopoverHoverDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Amount of time to delay (ms) after hovering starts before\n   * the popover opens. Defaults to 0ms.\n   */\n  @Input()\n  get satPopoverHover() { return this._satPopoverHover; }\n  set satPopoverHover(val: number) {\n    this._satPopoverHover = coerceNumberProperty(val);\n  }\n  private _satPopoverHover = 0;\n\n  /** Emits when the directive is destroyed. */\n  private _onDestroy = new Subject();\n\n  /** Emits when the user's mouse enters the element. */\n  private _onMouseEnter = new Subject<void>();\n\n  /** Emits when the user's mouse leaves the element. */\n  private _onMouseLeave = new Subject<void>();\n\n  constructor(public anchor: SatPopoverAnchor) { }\n\n  ngAfterViewInit() {\n    // Whenever the user hovers this host element, delay the configured\n    // amount of time and open the popover. Terminate if the mouse leaves\n    // the host element before the delay is complete.\n    this._onMouseEnter\n      .pipe(\n        switchMap(() => {\n          return of(null).pipe(\n            delay(this._satPopoverHover || 0),\n            takeUntil(this._onMouseLeave),\n          );\n        }),\n        takeUntil(this._onDestroy),\n      )\n      .subscribe(() => this.anchor.popover.open());\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  @HostListener('mouseenter')\n  showPopover() {\n    this._onMouseEnter.next();\n  }\n\n  @HostListener('mouseleave')\n  closePopover() {\n    this._onMouseLeave.next();\n    this.anchor.popover.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\n\nimport { SatPopover, SatPopoverAnchor } from './popover.component';\nimport { SatPopoverHoverDirective } from './popover-hover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    A11yModule,\n    BidiModule,\n  ],\n  declarations: [\n    SatPopover,\n    SatPopoverAnchor,\n    SatPopoverHoverDirective,\n  ],\n  exports: [\n    SatPopover,\n    SatPopoverAnchor,\n    SatPopoverHoverDirective,\n    BidiModule,\n  ]\n})\nexport class SatPopoverModule { }\n"]}