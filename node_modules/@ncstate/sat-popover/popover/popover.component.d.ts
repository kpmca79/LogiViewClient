import { ElementRef, EventEmitter, TemplateRef, OnInit, ViewContainerRef, AfterViewInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { SatPopoverScrollStrategy, SatPopoverHorizontalAlign, SatPopoverVerticalAlign, SatPopoverOpenOptions } from './types';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
import * as ɵngcc0 from '@angular/core';
export declare class SatPopoverAnchor implements AfterViewInit {
    elementRef: ElementRef;
    viewContainerRef: ViewContainerRef;
    popover: SatPopover;
    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SatPopoverAnchor>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SatPopoverAnchor, "[satPopoverAnchor]", ["satPopoverAnchor"], {
    "popover": "satPopoverAnchor";
}, {}, never>;
}
export declare class SatPopover implements OnInit {
    private _focusTrapFactory;
    private _viewContainerRef;
    private _document;
    /** Anchor element. */
    anchor: SatPopoverAnchor | ElementRef<HTMLElement> | HTMLElement;
    private _anchor;
    /** Alignment of the popover on the horizontal axis. */
    horizontalAlign: SatPopoverHorizontalAlign;
    private _horizontalAlign;
    /** Alignment of the popover on the x axis. Alias for `horizontalAlign`. */
    xAlign: SatPopoverHorizontalAlign;
    /** Alignment of the popover on the vertical axis. */
    verticalAlign: SatPopoverVerticalAlign;
    private _verticalAlign;
    /** Alignment of the popover on the y axis. Alias for `verticalAlign`. */
    yAlign: SatPopoverVerticalAlign;
    /** Whether the popover always opens with the specified alignment. */
    forceAlignment: boolean;
    private _forceAlignment;
    /**
     * Whether the popover's alignment is locked after opening. This prevents the popover
     * from changing its alignement when scrolling or changing the size of the viewport.
     */
    lockAlignment: boolean;
    private _lockAlignment;
    /** Whether the first focusable element should be focused on open. */
    autoFocus: boolean;
    private _autoFocus;
    _autoFocusOverride: boolean;
    /** Whether the popover should return focus to the previously focused element after closing. */
    restoreFocus: boolean;
    private _restoreFocus;
    _restoreFocusOverride: boolean;
    /** How the popover should handle scrolling. */
    scrollStrategy: SatPopoverScrollStrategy;
    private _scrollStrategy;
    /** Whether the popover should have a backdrop (includes closing on click). */
    hasBackdrop: boolean;
    private _hasBackdrop;
    /** Whether the popover should close when the user clicks the backdrop or presses ESC. */
    interactiveClose: boolean;
    private _interactiveClose;
    /** Custom transition to use while opening. */
    openTransition: string;
    private _openTransition;
    /** Custom transition to use while closing. */
    closeTransition: string;
    private _closeTransition;
    /** Optional backdrop class. */
    backdropClass: string;
    /** Emits when the popover is opened. */
    opened: EventEmitter<void>;
    /** Emits when the popover is closed. */
    closed: EventEmitter<any>;
    /** Emits when the popover has finished opening. */
    afterOpen: EventEmitter<void>;
    /** Emits when the popover has finished closing. */
    afterClose: EventEmitter<void>;
    /** Emits when the backdrop is clicked. */
    backdropClicked: EventEmitter<void>;
    /** Emits when a keydown event is targeted to this popover's overlay. */
    overlayKeydown: EventEmitter<KeyboardEvent>;
    /** Reference to template so it can be placed within a portal. */
    _templateRef: TemplateRef<any>;
    /** Classes to be added to the popover for setting the correct transform origin. */
    _classList: any;
    /** Whether the popover is presently open. */
    _open: boolean;
    /** Reference to the element to build a focus trap around. */
    private _focusTrapElement;
    /** Reference to the element that was focused before opening. */
    private _previouslyFocusedElement;
    /** Reference to a focus trap around the popover. */
    private _focusTrap;
    constructor(_focusTrapFactory: FocusTrapFactory, _anchoringService: SatPopoverAnchoringService, _viewContainerRef: ViewContainerRef, _document: any);
    ngOnInit(): void;
    /** Open this popover. */
    open(options?: SatPopoverOpenOptions): void;
    /** Close this popover. */
    close(value?: any): void;
    /** Toggle this popover open or closed. */
    toggle(): void;
    /** Realign the popover to the anchor. */
    realign(): void;
    /** Gets whether the popover is presently open. */
    isOpen(): boolean;
    /** Allows programmatically setting a custom anchor. */
    setCustomAnchor(viewContainer: ViewContainerRef, el: ElementRef<HTMLElement> | HTMLElement): void;
    /** Gets an animation config with customized (or default) transition values. */
    _getAnimation(): {
        value: any;
        params: any;
    };
    /** Callback for when the popover is finished animating in or out. */
    _onAnimationDone(event: AnimationEvent): void;
    /** Apply alignment classes based on alignment inputs. */
    _setAlignmentClasses(horizAlign?: SatPopoverHorizontalAlign, vertAlign?: SatPopoverVerticalAlign): void;
    /** Move the focus inside the focus trap and remember where to return later. */
    private _trapFocus;
    /** Restore focus to the element focused before the popover opened. Also destroy trap. */
    private _restoreFocusAndDestroyTrap;
    /** Save a reference to the element focused before the popover was opened. */
    private _savePreviouslyFocusedElement;
    /** Throws an error if the alignment is not a valid horizontalAlign. */
    private _validateHorizontalAlign;
    /** Throws an error if the alignment is not a valid verticalAlign. */
    private _validateVerticalAlign;
    /** Throws an error if the scroll strategy is not a valid strategy. */
    private _validateScrollStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SatPopover>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SatPopover, "sat-popover", never, {
    "backdropClass": "backdropClass";
    "anchor": "anchor";
    "horizontalAlign": "horizontalAlign";
    "xAlign": "xAlign";
    "verticalAlign": "verticalAlign";
    "yAlign": "yAlign";
    "forceAlignment": "forceAlignment";
    "lockAlignment": "lockAlignment";
    "autoFocus": "autoFocus";
    "restoreFocus": "restoreFocus";
    "scrollStrategy": "scrollStrategy";
    "hasBackdrop": "hasBackdrop";
    "interactiveClose": "interactiveClose";
    "openTransition": "openTransition";
    "closeTransition": "closeTransition";
}, {
    "opened": "opened";
    "closed": "closed";
    "afterOpen": "afterOpen";
    "afterClose": "afterClose";
    "backdropClicked": "backdropClicked";
    "overlayKeydown": "overlayKeydown";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,