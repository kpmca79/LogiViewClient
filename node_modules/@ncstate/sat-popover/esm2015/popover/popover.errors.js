/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { VALID_HORIZ_ALIGN, VALID_VERT_ALIGN, VALID_SCROLL } from './types';
/**
 * @return {?}
 */
export function getUnanchoredPopoverError() {
    return Error('SatPopover does not have an anchor.');
}
/**
 * @return {?}
 */
export function getInvalidPopoverAnchorError() {
    return Error('SatPopover#anchor must be an instance of SatPopoverAnchor, ElementRef, or HTMLElement.');
}
/**
 * @return {?}
 */
export function getInvalidPopoverError() {
    return Error('SatPopoverAnchor#satPopoverAnchor must be an instance of SatPopover.');
}
/**
 * @return {?}
 */
export function getInvalidSatPopoverAnchorError() {
    return Error(`SatPopoverAnchor must be associated with a ` +
        `SatPopover component. ` +
        `Examples: <sat-popover [anchor]="satPopoverAnchorTemplateRef"> or ` +
        `<button satPopoverAnchor [satPopoverAnchor]="satPopoverTemplateRef">`);
}
/**
 * @param {?} alignment
 * @return {?}
 */
export function getInvalidHorizontalAlignError(alignment) {
    return Error(generateGenericError('horizontalAlign/xAlign', alignment, VALID_HORIZ_ALIGN));
}
/**
 * @param {?} alignment
 * @return {?}
 */
export function getInvalidVerticalAlignError(alignment) {
    return Error(generateGenericError('verticalAlign/yAlign', alignment, VALID_VERT_ALIGN));
}
/**
 * @param {?} strategy
 * @return {?}
 */
export function getInvalidScrollStrategyError(strategy) {
    return Error(generateGenericError('scrollStrategy', strategy, VALID_SCROLL));
}
/**
 * @param {?} apiName
 * @param {?} invalid
 * @param {?} valid
 * @return {?}
 */
function generateGenericError(apiName, invalid, valid) {
    return `Invalid ${apiName}: '${invalid}'. Valid options are ${valid.map((/**
     * @param {?} v
     * @return {?}
     */
    v => `'${v}'`)).join(', ')}.`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5lcnJvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvcG9wb3Zlci5lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7QUFFNUUsTUFBTSxVQUFVLHlCQUF5QjtJQUN2QyxPQUFPLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7Ozs7QUFFRCxNQUFNLFVBQVUsNEJBQTRCO0lBQzFDLE9BQU8sS0FBSyxDQUFDLHdGQUF3RixDQUFDLENBQUM7QUFDekcsQ0FBQzs7OztBQUVELE1BQU0sVUFBVSxzQkFBc0I7SUFDcEMsT0FBTyxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztBQUN2RixDQUFDOzs7O0FBRUQsTUFBTSxVQUFVLCtCQUErQjtJQUM3QyxPQUFPLEtBQUssQ0FDViw2Q0FBNkM7UUFDM0Msd0JBQXdCO1FBQ3hCLG9FQUFvRTtRQUNwRSxzRUFBc0UsQ0FDekUsQ0FBQztBQUNKLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUFDLFNBQVM7SUFDdEQsT0FBTyxLQUFLLENBQUMsb0JBQW9CLENBQUMsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztBQUM3RixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxTQUFTO0lBQ3BELE9BQU8sS0FBSyxDQUFDLG9CQUFvQixDQUFDLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDMUYsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsNkJBQTZCLENBQUMsUUFBUTtJQUNwRCxPQUFPLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUMvRSxDQUFDOzs7Ozs7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxPQUFlLEVBQUUsT0FBWSxFQUFFLEtBQWU7SUFDMUUsT0FBTyxXQUFXLE9BQU8sTUFBTSxPQUFPLHdCQUF3QixLQUFLLENBQUMsR0FBRzs7OztJQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ3ZHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWQUxJRF9IT1JJWl9BTElHTiwgVkFMSURfVkVSVF9BTElHTiwgVkFMSURfU0NST0xMIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmFuY2hvcmVkUG9wb3ZlckVycm9yKCk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKCdTYXRQb3BvdmVyIGRvZXMgbm90IGhhdmUgYW4gYW5jaG9yLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52YWxpZFBvcG92ZXJBbmNob3JFcnJvcigpOiBFcnJvciB7XG4gIHJldHVybiBFcnJvcignU2F0UG9wb3ZlciNhbmNob3IgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBTYXRQb3BvdmVyQW5jaG9yLCBFbGVtZW50UmVmLCBvciBIVE1MRWxlbWVudC4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmFsaWRQb3BvdmVyRXJyb3IoKTogRXJyb3Ige1xuICByZXR1cm4gRXJyb3IoJ1NhdFBvcG92ZXJBbmNob3Ijc2F0UG9wb3ZlckFuY2hvciBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFNhdFBvcG92ZXIuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZhbGlkU2F0UG9wb3ZlckFuY2hvckVycm9yKCk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKFxuICAgIGBTYXRQb3BvdmVyQW5jaG9yIG11c3QgYmUgYXNzb2NpYXRlZCB3aXRoIGEgYCArXG4gICAgICBgU2F0UG9wb3ZlciBjb21wb25lbnQuIGAgK1xuICAgICAgYEV4YW1wbGVzOiA8c2F0LXBvcG92ZXIgW2FuY2hvcl09XCJzYXRQb3BvdmVyQW5jaG9yVGVtcGxhdGVSZWZcIj4gb3IgYCArXG4gICAgICBgPGJ1dHRvbiBzYXRQb3BvdmVyQW5jaG9yIFtzYXRQb3BvdmVyQW5jaG9yXT1cInNhdFBvcG92ZXJUZW1wbGF0ZVJlZlwiPmBcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmFsaWRIb3Jpem9udGFsQWxpZ25FcnJvcihhbGlnbm1lbnQpOiBFcnJvciB7XG4gIHJldHVybiBFcnJvcihnZW5lcmF0ZUdlbmVyaWNFcnJvcignaG9yaXpvbnRhbEFsaWduL3hBbGlnbicsIGFsaWdubWVudCwgVkFMSURfSE9SSVpfQUxJR04pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmFsaWRWZXJ0aWNhbEFsaWduRXJyb3IoYWxpZ25tZW50KTogRXJyb3Ige1xuICByZXR1cm4gRXJyb3IoZ2VuZXJhdGVHZW5lcmljRXJyb3IoJ3ZlcnRpY2FsQWxpZ24veUFsaWduJywgYWxpZ25tZW50LCBWQUxJRF9WRVJUX0FMSUdOKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZhbGlkU2Nyb2xsU3RyYXRlZ3lFcnJvcihzdHJhdGVneSk6IEVycm9yIHtcbiAgcmV0dXJuIEVycm9yKGdlbmVyYXRlR2VuZXJpY0Vycm9yKCdzY3JvbGxTdHJhdGVneScsIHN0cmF0ZWd5LCBWQUxJRF9TQ1JPTEwpKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHZW5lcmljRXJyb3IoYXBpTmFtZTogc3RyaW5nLCBpbnZhbGlkOiBhbnksIHZhbGlkOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiBgSW52YWxpZCAke2FwaU5hbWV9OiAnJHtpbnZhbGlkfScuIFZhbGlkIG9wdGlvbnMgYXJlICR7dmFsaWQubWFwKHYgPT4gYCcke3Z9J2ApLmpvaW4oJywgJyl9LmA7XG59XG4iXX0=