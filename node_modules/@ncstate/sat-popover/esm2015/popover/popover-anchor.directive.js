/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';
import { SatPopover } from './popover.component';
import { getInvalidPopoverError } from './popover.errors';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
export class SatPopoverAnchor {
    /**
     * @param {?} _elementRef
     * @param {?} _viewContainerRef
     * @param {?} _anchoring
     */
    constructor(_elementRef, _viewContainerRef, _anchoring) {
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._anchoring = _anchoring;
        /**
         * Emits when the popover is opened.
         */
        this.popoverOpened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.popoverClosed = new EventEmitter();
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
    }
    /**
     * Reference to the popover instance.
     * @return {?}
     */
    get attachedPopover() { return this._attachedPopover; }
    /**
     * @param {?} value
     * @return {?}
     */
    set attachedPopover(value) {
        this._validateAttachedPopover(value);
        this._attachedPopover = value;
        // Anchor the popover to the element ref
        this._anchoring.anchor(this.attachedPopover, this._viewContainerRef, this._elementRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Re-emit open and close events
        /** @type {?} */
        const opened$ = this._anchoring.popoverOpened
            .pipe(tap((/**
         * @return {?}
         */
        () => this.popoverOpened.emit())));
        /** @type {?} */
        const closed$ = this._anchoring.popoverClosed
            .pipe(tap((/**
         * @param {?} value
         * @return {?}
         */
        value => this.popoverClosed.emit(value))));
        merge(opened$, closed$).pipe(takeUntil(this._onDestroy)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isPopoverOpen() {
        return this._anchoring.isPopoverOpen();
    }
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    togglePopover() {
        this._anchoring.togglePopover();
    }
    /**
     * Opens the popover.
     * @param {?=} options
     * @return {?}
     */
    openPopover(options = {}) {
        this._anchoring.openPopover(options);
    }
    /**
     * Closes the popover.
     * @param {?=} value
     * @return {?}
     */
    closePopover(value) {
        this._anchoring.closePopover(value);
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realignPopover() {
        this._anchoring.realignPopoverToAnchor();
    }
    /**
     * Get a reference to the anchor element.
     * @return {?}
     */
    getElement() {
        return this._elementRef;
    }
    /**
     * Throws an error if the popover instance is not provided.
     * @private
     * @param {?} popover
     * @return {?}
     */
    _validateAttachedPopover(popover) {
        if (!popover || !(popover instanceof SatPopover)) {
            throw getInvalidPopoverError();
        }
    }
}
SatPopoverAnchor.decorators = [
    { type: Directive, args: [{
                selector: '[satPopoverAnchorFor]',
                exportAs: 'satPopoverAnchor',
                providers: [SatPopoverAnchoringService],
            },] }
];
/** @nocollapse */
SatPopoverAnchor.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: SatPopoverAnchoringService }
];
SatPopoverAnchor.propDecorators = {
    attachedPopover: [{ type: Input, args: ['satPopoverAnchorFor',] }],
    popoverOpened: [{ type: Output }],
    popoverClosed: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._attachedPopover;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverOpened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    SatPopoverAnchor.prototype.popoverClosed;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SatPopoverAnchor.prototype._viewContainerRef;
    /** @type {?} */
    SatPopoverAnchor.prototype._anchoring;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1hbmNob3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5jc3RhdGUvc2F0LXBvcG92ZXIvIiwic291cmNlcyI6WyJwb3BvdmVyL3BvcG92ZXItYW5jaG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBUXpFLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7OztJQXNCM0IsWUFDVSxXQUF1QixFQUN2QixpQkFBbUMsRUFDcEMsVUFBc0M7UUFGckMsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQUNwQyxlQUFVLEdBQVYsVUFBVSxDQUE0Qjs7OztRQVhyQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7UUFHekMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDOzs7O1FBRzFDLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBTXJDLENBQUM7Ozs7O0lBdkJMLElBQ0ksZUFBZSxLQUFLLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDdkQsSUFBSSxlQUFlLENBQUMsS0FBaUI7UUFDbkMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsd0NBQXdDO1FBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RixDQUFDOzs7O0lBa0JELFFBQVE7OztjQUVBLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWE7YUFDMUMsSUFBSSxDQUFDLEdBQUc7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQzs7Y0FDdkMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTthQUMxQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztRQUNyRCxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDdkUsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFHRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBR0QsYUFBYTtRQUNYLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Ozs7O0lBR0QsV0FBVyxDQUFDLFVBQWlDLEVBQUU7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBR0QsWUFBWSxDQUFDLEtBQVc7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFHRCxjQUFjO1FBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBR0QsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7Ozs7O0lBR08sd0JBQXdCLENBQUMsT0FBbUI7UUFDbEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLFVBQVUsQ0FBQyxFQUFFO1lBQ2hELE1BQU0sc0JBQXNCLEVBQUUsQ0FBQztTQUNoQztJQUNILENBQUM7OztZQWxGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUM7YUFDeEM7Ozs7WUFwQkMsVUFBVTtZQU1WLGdCQUFnQjtZQU9ULDBCQUEwQjs7OzhCQVdoQyxLQUFLLFNBQUMscUJBQXFCOzRCQVczQixNQUFNOzRCQUdOLE1BQU07Ozs7Ozs7SUFOUCw0Q0FBcUM7Ozs7O0lBR3JDLHlDQUFtRDs7Ozs7SUFHbkQseUNBQWtEOzs7Ozs7SUFHbEQsc0NBQXlDOzs7OztJQUd2Qyx1Q0FBK0I7Ozs7O0lBQy9CLDZDQUEyQzs7SUFDM0Msc0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTYXRQb3BvdmVyIH0gZnJvbSAnLi9wb3BvdmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRJbnZhbGlkUG9wb3ZlckVycm9yIH0gZnJvbSAnLi9wb3BvdmVyLmVycm9ycyc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyQW5jaG9yaW5nU2VydmljZSB9IGZyb20gJy4vcG9wb3Zlci1hbmNob3Jpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBTYXRQb3BvdmVyT3Blbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NhdFBvcG92ZXJBbmNob3JGb3JdJyxcbiAgZXhwb3J0QXM6ICdzYXRQb3BvdmVyQW5jaG9yJyxcbiAgcHJvdmlkZXJzOiBbU2F0UG9wb3ZlckFuY2hvcmluZ1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBTYXRQb3BvdmVyQW5jaG9yIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBvcG92ZXIgaW5zdGFuY2UuICovXG4gIEBJbnB1dCgnc2F0UG9wb3ZlckFuY2hvckZvcicpXG4gIGdldCBhdHRhY2hlZFBvcG92ZXIoKSB7IHJldHVybiB0aGlzLl9hdHRhY2hlZFBvcG92ZXI7IH1cbiAgc2V0IGF0dGFjaGVkUG9wb3Zlcih2YWx1ZTogU2F0UG9wb3Zlcikge1xuICAgIHRoaXMuX3ZhbGlkYXRlQXR0YWNoZWRQb3BvdmVyKHZhbHVlKTtcbiAgICB0aGlzLl9hdHRhY2hlZFBvcG92ZXIgPSB2YWx1ZTtcbiAgICAvLyBBbmNob3IgdGhlIHBvcG92ZXIgdG8gdGhlIGVsZW1lbnQgcmVmXG4gICAgdGhpcy5fYW5jaG9yaW5nLmFuY2hvcih0aGlzLmF0dGFjaGVkUG9wb3ZlciwgdGhpcy5fdmlld0NvbnRhaW5lclJlZiwgdGhpcy5fZWxlbWVudFJlZik7XG4gIH1cbiAgcHJpdmF0ZSBfYXR0YWNoZWRQb3BvdmVyOiBTYXRQb3BvdmVyO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBwb3BvdmVyIGlzIG9wZW5lZC4gKi9cbiAgQE91dHB1dCgpIHBvcG92ZXJPcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqIEVtaXRzIHdoZW4gdGhlIHBvcG92ZXIgaXMgY2xvc2VkLiAqL1xuICBAT3V0cHV0KCkgcG9wb3ZlckNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBkaXJlY3RpdmUgaXMgZGVzdHJveWVkLiAqL1xuICBwcml2YXRlIF9vbkRlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwdWJsaWMgX2FuY2hvcmluZzogU2F0UG9wb3ZlckFuY2hvcmluZ1NlcnZpY2UsXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gUmUtZW1pdCBvcGVuIGFuZCBjbG9zZSBldmVudHNcbiAgICBjb25zdCBvcGVuZWQkID0gdGhpcy5fYW5jaG9yaW5nLnBvcG92ZXJPcGVuZWRcbiAgICAgIC5waXBlKHRhcCgoKSA9PiB0aGlzLnBvcG92ZXJPcGVuZWQuZW1pdCgpKSk7XG4gICAgY29uc3QgY2xvc2VkJCA9IHRoaXMuX2FuY2hvcmluZy5wb3BvdmVyQ2xvc2VkXG4gICAgICAucGlwZSh0YXAodmFsdWUgPT4gdGhpcy5wb3BvdmVyQ2xvc2VkLmVtaXQodmFsdWUpKSk7XG4gICAgbWVyZ2Uob3BlbmVkJCwgY2xvc2VkJCkucGlwZSh0YWtlVW50aWwodGhpcy5fb25EZXN0cm95KSkuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9vbkRlc3Ryb3kubmV4dCgpO1xuICAgIHRoaXMuX29uRGVzdHJveS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqIEdldHMgd2hldGhlciB0aGUgcG9wb3ZlciBpcyBwcmVzZW50bHkgb3Blbi4gKi9cbiAgaXNQb3BvdmVyT3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYW5jaG9yaW5nLmlzUG9wb3Zlck9wZW4oKTtcbiAgfVxuXG4gIC8qKiBUb2dnbGVzIHRoZSBwb3BvdmVyIGJldHdlZW4gdGhlIG9wZW4gYW5kIGNsb3NlZCBzdGF0ZXMuICovXG4gIHRvZ2dsZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5fYW5jaG9yaW5nLnRvZ2dsZVBvcG92ZXIoKTtcbiAgfVxuXG4gIC8qKiBPcGVucyB0aGUgcG9wb3Zlci4gKi9cbiAgb3BlblBvcG92ZXIob3B0aW9uczogU2F0UG9wb3Zlck9wZW5PcHRpb25zID0ge30pOiB2b2lkIHtcbiAgICB0aGlzLl9hbmNob3Jpbmcub3BlblBvcG92ZXIob3B0aW9ucyk7XG4gIH1cblxuICAvKiogQ2xvc2VzIHRoZSBwb3BvdmVyLiAqL1xuICBjbG9zZVBvcG92ZXIodmFsdWU/OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9hbmNob3JpbmcuY2xvc2VQb3BvdmVyKHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBSZWFsaWduIHRoZSBwb3BvdmVyIHRvIHRoZSBhbmNob3IuICovXG4gIHJlYWxpZ25Qb3BvdmVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2FuY2hvcmluZy5yZWFsaWduUG9wb3ZlclRvQW5jaG9yKCk7XG4gIH1cblxuICAvKiogR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBhbmNob3IgZWxlbWVudC4gKi9cbiAgZ2V0RWxlbWVudCgpOiBFbGVtZW50UmVmIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZjtcbiAgfVxuXG4gIC8qKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHBvcG92ZXIgaW5zdGFuY2UgaXMgbm90IHByb3ZpZGVkLiAqL1xuICBwcml2YXRlIF92YWxpZGF0ZUF0dGFjaGVkUG9wb3Zlcihwb3BvdmVyOiBTYXRQb3BvdmVyKTogdm9pZCB7XG4gICAgaWYgKCFwb3BvdmVyIHx8ICEocG9wb3ZlciBpbnN0YW5jZW9mIFNhdFBvcG92ZXIpKSB7XG4gICAgICB0aHJvdyBnZXRJbnZhbGlkUG9wb3ZlckVycm9yKCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==