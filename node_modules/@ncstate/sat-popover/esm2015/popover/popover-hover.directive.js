/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { of, Subject } from 'rxjs';
import { delay, switchMap, takeUntil } from 'rxjs/operators';
import { SatPopoverAnchor } from './popover.component';
export class SatPopoverHoverDirective {
    /**
     * @param {?} anchor
     */
    constructor(anchor) {
        this.anchor = anchor;
        this._satPopoverHover = 0;
        /**
         * Emits when the directive is destroyed.
         */
        this._onDestroy = new Subject();
        /**
         * Emits when the user's mouse enters the element.
         */
        this._onMouseEnter = new Subject();
        /**
         * Emits when the user's mouse leaves the element.
         */
        this._onMouseLeave = new Subject();
    }
    /**
     * Amount of time to delay (ms) after hovering starts before
     * the popover opens. Defaults to 0ms.
     * @return {?}
     */
    get satPopoverHover() { return this._satPopoverHover; }
    /**
     * @param {?} val
     * @return {?}
     */
    set satPopoverHover(val) {
        this._satPopoverHover = coerceNumberProperty(val);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Whenever the user hovers this host element, delay the configured
        // amount of time and open the popover. Terminate if the mouse leaves
        // the host element before the delay is complete.
        this._onMouseEnter
            .pipe(switchMap((/**
         * @return {?}
         */
        () => {
            return of(null).pipe(delay(this._satPopoverHover || 0), takeUntil(this._onMouseLeave));
        })), takeUntil(this._onDestroy))
            .subscribe((/**
         * @return {?}
         */
        () => this.anchor.popover.open()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * @return {?}
     */
    showPopover() {
        this._onMouseEnter.next();
    }
    /**
     * @return {?}
     */
    closePopover() {
        this._onMouseLeave.next();
        this.anchor.popover.close();
    }
}
SatPopoverHoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[satPopoverHover]'
            },] }
];
/** @nocollapse */
SatPopoverHoverDirective.ctorParameters = () => [
    { type: SatPopoverAnchor }
];
SatPopoverHoverDirective.propDecorators = {
    satPopoverHover: [{ type: Input }],
    showPopover: [{ type: HostListener, args: ['mouseenter',] }],
    closePopover: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._satPopoverHover;
    /**
     * Emits when the directive is destroyed.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onDestroy;
    /**
     * Emits when the user's mouse enters the element.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onMouseEnter;
    /**
     * Emits when the user's mouse leaves the element.
     * @type {?}
     * @private
     */
    SatPopoverHoverDirective.prototype._onMouseLeave;
    /** @type {?} */
    SatPopoverHoverDirective.prototype.anchor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1ob3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmNzdGF0ZS9zYXQtcG9wb3Zlci8iLCJzb3VyY2VzIjpbInBvcG92ZXIvcG9wb3Zlci1ob3Zlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFLdkQsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQXFCbkMsWUFBbUIsTUFBd0I7UUFBeEIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFYbkMscUJBQWdCLEdBQUcsQ0FBQyxDQUFDOzs7O1FBR3JCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOzs7O1FBRzNCLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQzs7OztRQUdwQyxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFFRyxDQUFDOzs7Ozs7SUFoQmhELElBQ0ksZUFBZSxLQUFLLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDdkQsSUFBSSxlQUFlLENBQUMsR0FBVztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7OztJQWNELGVBQWU7UUFDYixtRUFBbUU7UUFDbkUscUVBQXFFO1FBQ3JFLGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsYUFBYTthQUNmLElBQUksQ0FDSCxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDYixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxDQUFDLEVBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQzlCLENBQUM7UUFDSixDQUFDLEVBQUMsRUFDRixTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUMzQjthQUNBLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFDLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUdELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFHRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUF6REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7YUFDOUI7Ozs7WUFKUSxnQkFBZ0I7Ozs4QkFVdEIsS0FBSzswQkF3Q0wsWUFBWSxTQUFDLFlBQVk7MkJBS3pCLFlBQVksU0FBQyxZQUFZOzs7Ozs7O0lBeEMxQixvREFBNkI7Ozs7OztJQUc3Qiw4Q0FBbUM7Ozs7OztJQUduQyxpREFBNEM7Ozs7OztJQUc1QyxpREFBNEM7O0lBRWhDLDBDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VOdW1iZXJQcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVsYXksIHN3aXRjaE1hcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTYXRQb3BvdmVyQW5jaG9yIH0gZnJvbSAnLi9wb3BvdmVyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzYXRQb3BvdmVySG92ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBTYXRQb3BvdmVySG92ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgKG1zKSBhZnRlciBob3ZlcmluZyBzdGFydHMgYmVmb3JlXG4gICAqIHRoZSBwb3BvdmVyIG9wZW5zLiBEZWZhdWx0cyB0byAwbXMuXG4gICAqL1xuICBASW5wdXQoKVxuICBnZXQgc2F0UG9wb3ZlckhvdmVyKCkgeyByZXR1cm4gdGhpcy5fc2F0UG9wb3ZlckhvdmVyOyB9XG4gIHNldCBzYXRQb3BvdmVySG92ZXIodmFsOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zYXRQb3BvdmVySG92ZXIgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWwpO1xuICB9XG4gIHByaXZhdGUgX3NhdFBvcG92ZXJIb3ZlciA9IDA7XG5cbiAgLyoqIEVtaXRzIHdoZW4gdGhlIGRpcmVjdGl2ZSBpcyBkZXN0cm95ZWQuICovXG4gIHByaXZhdGUgX29uRGVzdHJveSA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgLyoqIEVtaXRzIHdoZW4gdGhlIHVzZXIncyBtb3VzZSBlbnRlcnMgdGhlIGVsZW1lbnQuICovXG4gIHByaXZhdGUgX29uTW91c2VFbnRlciA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgLyoqIEVtaXRzIHdoZW4gdGhlIHVzZXIncyBtb3VzZSBsZWF2ZXMgdGhlIGVsZW1lbnQuICovXG4gIHByaXZhdGUgX29uTW91c2VMZWF2ZSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGFuY2hvcjogU2F0UG9wb3ZlckFuY2hvcikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8vIFdoZW5ldmVyIHRoZSB1c2VyIGhvdmVycyB0aGlzIGhvc3QgZWxlbWVudCwgZGVsYXkgdGhlIGNvbmZpZ3VyZWRcbiAgICAvLyBhbW91bnQgb2YgdGltZSBhbmQgb3BlbiB0aGUgcG9wb3Zlci4gVGVybWluYXRlIGlmIHRoZSBtb3VzZSBsZWF2ZXNcbiAgICAvLyB0aGUgaG9zdCBlbGVtZW50IGJlZm9yZSB0aGUgZGVsYXkgaXMgY29tcGxldGUuXG4gICAgdGhpcy5fb25Nb3VzZUVudGVyXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gb2YobnVsbCkucGlwZShcbiAgICAgICAgICAgIGRlbGF5KHRoaXMuX3NhdFBvcG92ZXJIb3ZlciB8fCAwKSxcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9vbk1vdXNlTGVhdmUpLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5fb25EZXN0cm95KSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5hbmNob3IucG9wb3Zlci5vcGVuKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fb25EZXN0cm95Lm5leHQoKTtcbiAgICB0aGlzLl9vbkRlc3Ryb3kuY29tcGxldGUoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICBzaG93UG9wb3ZlcigpIHtcbiAgICB0aGlzLl9vbk1vdXNlRW50ZXIubmV4dCgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gIGNsb3NlUG9wb3ZlcigpIHtcbiAgICB0aGlzLl9vbk1vdXNlTGVhdmUubmV4dCgpO1xuICAgIHRoaXMuYW5jaG9yLnBvcG92ZXIuY2xvc2UoKTtcbiAgfVxufVxuIl19