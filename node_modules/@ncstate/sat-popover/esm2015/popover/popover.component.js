/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Inject, Input, ViewChild, ViewEncapsulation, TemplateRef, Optional, Output, Directive, ViewContainerRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { transformPopover } from './popover.animations';
import { getUnanchoredPopoverError, getInvalidHorizontalAlignError, getInvalidVerticalAlignError, getInvalidScrollStrategyError, getInvalidPopoverAnchorError, getInvalidSatPopoverAnchorError, getInvalidPopoverError } from './popover.errors';
import { VALID_SCROLL, VALID_HORIZ_ALIGN, VALID_VERT_ALIGN } from './types';
import { SatPopoverAnchoringService } from './popover-anchoring.service';
// See http://cubic-bezier.com/#.25,.8,.25,1 for reference.
/** @type {?} */
const DEFAULT_TRANSITION = '200ms cubic-bezier(0.25, 0.8, 0.25, 1)';
export class SatPopoverAnchor {
    /**
     * @param {?} elementRef
     * @param {?} viewContainerRef
     */
    constructor(elementRef, viewContainerRef) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @return {?}
     */
    get popover() {
        return this._popover;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set popover(val) {
        if (val instanceof SatPopover) {
            val.anchor = this;
        }
        else {
            // when a directive is added with no arguments,
            // angular assigns `''` as the argument
            if (val !== '') {
                throw getInvalidPopoverError();
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.popover) {
            throw getInvalidSatPopoverAnchorError();
        }
    }
}
SatPopoverAnchor.decorators = [
    { type: Directive, args: [{
                selector: '[satPopoverAnchor]',
                exportAs: 'satPopoverAnchor'
            },] }
];
/** @nocollapse */
SatPopoverAnchor.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef }
];
SatPopoverAnchor.propDecorators = {
    popover: [{ type: Input, args: ['satPopoverAnchor',] }]
};
if (false) {
    /**
     * \@internal
     * @type {?}
     */
    SatPopoverAnchor.prototype._popover;
    /** @type {?} */
    SatPopoverAnchor.prototype.elementRef;
    /** @type {?} */
    SatPopoverAnchor.prototype.viewContainerRef;
}
export class SatPopover {
    /**
     * @param {?} _focusTrapFactory
     * @param {?} _anchoringService
     * @param {?} _viewContainerRef
     * @param {?} _document
     */
    constructor(_focusTrapFactory, _anchoringService, _viewContainerRef, _document) {
        this._focusTrapFactory = _focusTrapFactory;
        this._viewContainerRef = _viewContainerRef;
        this._document = _document;
        this._horizontalAlign = 'center';
        this._verticalAlign = 'center';
        this._forceAlignment = false;
        this._lockAlignment = false;
        this._autoFocus = true;
        this._autoFocusOverride = true;
        this._restoreFocus = true;
        this._restoreFocusOverride = true;
        this._scrollStrategy = 'reposition';
        this._hasBackdrop = false;
        this._interactiveClose = true;
        this._openTransition = DEFAULT_TRANSITION;
        this._closeTransition = DEFAULT_TRANSITION;
        /**
         * Optional backdrop class.
         */
        this.backdropClass = '';
        /**
         * Emits when the popover is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Emits when the popover is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Emits when the popover has finished opening.
         */
        this.afterOpen = new EventEmitter();
        /**
         * Emits when the popover has finished closing.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits when the backdrop is clicked.
         */
        this.backdropClicked = new EventEmitter();
        /**
         * Emits when a keydown event is targeted to this popover's overlay.
         */
        this.overlayKeydown = new EventEmitter();
        /**
         * Classes to be added to the popover for setting the correct transform origin.
         */
        this._classList = {};
        /**
         * Whether the popover is presently open.
         */
        this._open = false;
        // `@internal` stripping doesn't seem to work if the property is
        // declared inside the constructor
        this._anchoringService = _anchoringService;
    }
    /**
     * Anchor element.
     * @return {?}
     */
    get anchor() {
        return this._anchor;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set anchor(val) {
        if (val instanceof SatPopoverAnchor) {
            val._popover = this;
            this._anchoringService.anchor(this, val.viewContainerRef, val.elementRef);
            this._anchor = val;
        }
        else if (val instanceof ElementRef || val instanceof HTMLElement) {
            this._anchoringService.anchor(this, this._viewContainerRef, val);
            this._anchor = val;
        }
        else if (val) {
            throw getInvalidPopoverAnchorError();
        }
    }
    /**
     * Alignment of the popover on the horizontal axis.
     * @return {?}
     */
    get horizontalAlign() {
        return this._horizontalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set horizontalAlign(val) {
        this._validateHorizontalAlign(val);
        if (this._horizontalAlign !== val) {
            this._horizontalAlign = val;
            this._anchoringService.repositionPopover();
        }
    }
    /**
     * Alignment of the popover on the x axis. Alias for `horizontalAlign`.
     * @return {?}
     */
    get xAlign() {
        return this.horizontalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set xAlign(val) {
        this.horizontalAlign = val;
    }
    /**
     * Alignment of the popover on the vertical axis.
     * @return {?}
     */
    get verticalAlign() {
        return this._verticalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set verticalAlign(val) {
        this._validateVerticalAlign(val);
        if (this._verticalAlign !== val) {
            this._verticalAlign = val;
            this._anchoringService.repositionPopover();
        }
    }
    /**
     * Alignment of the popover on the y axis. Alias for `verticalAlign`.
     * @return {?}
     */
    get yAlign() {
        return this.verticalAlign;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set yAlign(val) {
        this.verticalAlign = val;
    }
    /**
     * Whether the popover always opens with the specified alignment.
     * @return {?}
     */
    get forceAlignment() {
        return this._forceAlignment;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set forceAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._forceAlignment !== coercedVal) {
            this._forceAlignment = coercedVal;
            this._anchoringService.repositionPopover();
        }
    }
    /**
     * Whether the popover's alignment is locked after opening. This prevents the popover
     * from changing its alignement when scrolling or changing the size of the viewport.
     * @return {?}
     */
    get lockAlignment() {
        return this._lockAlignment;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set lockAlignment(val) {
        /** @type {?} */
        const coercedVal = coerceBooleanProperty(val);
        if (this._lockAlignment !== coercedVal) {
            this._lockAlignment = coerceBooleanProperty(val);
            this._anchoringService.repositionPopover();
        }
    }
    /**
     * Whether the first focusable element should be focused on open.
     * @return {?}
     */
    get autoFocus() {
        return this._autoFocus && this._autoFocusOverride;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set autoFocus(val) {
        this._autoFocus = coerceBooleanProperty(val);
    }
    /**
     * Whether the popover should return focus to the previously focused element after closing.
     * @return {?}
     */
    get restoreFocus() {
        return this._restoreFocus && this._restoreFocusOverride;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set restoreFocus(val) {
        this._restoreFocus = coerceBooleanProperty(val);
    }
    /**
     * How the popover should handle scrolling.
     * @return {?}
     */
    get scrollStrategy() {
        return this._scrollStrategy;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set scrollStrategy(val) {
        this._validateScrollStrategy(val);
        if (this._scrollStrategy !== val) {
            this._scrollStrategy = val;
            this._anchoringService.updatePopoverConfig();
        }
    }
    /**
     * Whether the popover should have a backdrop (includes closing on click).
     * @return {?}
     */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set hasBackdrop(val) {
        this._hasBackdrop = coerceBooleanProperty(val);
    }
    /**
     * Whether the popover should close when the user clicks the backdrop or presses ESC.
     * @return {?}
     */
    get interactiveClose() {
        return this._interactiveClose;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set interactiveClose(val) {
        this._interactiveClose = coerceBooleanProperty(val);
    }
    /**
     * Custom transition to use while opening.
     * @return {?}
     */
    get openTransition() {
        return this._openTransition;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set openTransition(val) {
        if (val) {
            this._openTransition = val;
        }
    }
    /**
     * Custom transition to use while closing.
     * @return {?}
     */
    get closeTransition() {
        return this._closeTransition;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set closeTransition(val) {
        if (val) {
            this._closeTransition = val;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setAlignmentClasses();
    }
    /**
     * Open this popover.
     * @param {?=} options
     * @return {?}
     */
    open(options = {}) {
        if (this._anchor) {
            this._anchoringService.openPopover(options);
            return;
        }
        throw getUnanchoredPopoverError();
    }
    /**
     * Close this popover.
     * @param {?=} value
     * @return {?}
     */
    close(value) {
        this._anchoringService.closePopover(value);
    }
    /**
     * Toggle this popover open or closed.
     * @return {?}
     */
    toggle() {
        this._anchoringService.togglePopover();
    }
    /**
     * Realign the popover to the anchor.
     * @return {?}
     */
    realign() {
        this._anchoringService.realignPopoverToAnchor();
    }
    /**
     * Gets whether the popover is presently open.
     * @return {?}
     */
    isOpen() {
        return this._open;
    }
    /**
     * Allows programmatically setting a custom anchor.
     * @param {?} viewContainer
     * @param {?} el
     * @return {?}
     */
    setCustomAnchor(viewContainer, el) {
        this._anchor = el;
        this._anchoringService.anchor(this, viewContainer, el);
    }
    /**
     * Gets an animation config with customized (or default) transition values.
     * @return {?}
     */
    _getAnimation() {
        return {
            value: 'visible',
            params: { openTransition: this.openTransition, closeTransition: this.closeTransition }
        };
    }
    /**
     * Callback for when the popover is finished animating in or out.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        if (event.toState === 'visible') {
            this._trapFocus();
            this.afterOpen.emit();
        }
        else if (event.toState === 'void') {
            this._restoreFocusAndDestroyTrap();
            this.afterClose.emit();
        }
    }
    /**
     * Apply alignment classes based on alignment inputs.
     * @param {?=} horizAlign
     * @param {?=} vertAlign
     * @return {?}
     */
    _setAlignmentClasses(horizAlign = this.horizontalAlign, vertAlign = this.verticalAlign) {
        this._classList['sat-popover-before'] = horizAlign === 'before' || horizAlign === 'end';
        this._classList['sat-popover-after'] = horizAlign === 'after' || horizAlign === 'start';
        this._classList['sat-popover-above'] = vertAlign === 'above' || vertAlign === 'end';
        this._classList['sat-popover-below'] = vertAlign === 'below' || vertAlign === 'start';
        this._classList['sat-popover-center'] = horizAlign === 'center' || vertAlign === 'center';
    }
    /**
     * Move the focus inside the focus trap and remember where to return later.
     * @private
     * @return {?}
     */
    _trapFocus() {
        this._savePreviouslyFocusedElement();
        // There won't be a focus trap element if the close animation starts before open finishes
        if (!this._focusTrapElement) {
            return;
        }
        if (!this._focusTrap && this._focusTrapElement) {
            this._focusTrap = this._focusTrapFactory.create(this._focusTrapElement.nativeElement);
        }
        if (this.autoFocus) {
            this._focusTrap.focusInitialElementWhenReady();
        }
    }
    /**
     * Restore focus to the element focused before the popover opened. Also destroy trap.
     * @private
     * @return {?}
     */
    _restoreFocusAndDestroyTrap() {
        /** @type {?} */
        const toFocus = this._previouslyFocusedElement;
        // Must check active element is focusable for IE sake
        if (toFocus && 'focus' in toFocus && this.restoreFocus) {
            this._previouslyFocusedElement.focus();
        }
        this._previouslyFocusedElement = null;
        if (this._focusTrap) {
            this._focusTrap.destroy();
            this._focusTrap = undefined;
        }
    }
    /**
     * Save a reference to the element focused before the popover was opened.
     * @private
     * @return {?}
     */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._previouslyFocusedElement = (/** @type {?} */ (this._document.activeElement));
        }
    }
    /**
     * Throws an error if the alignment is not a valid horizontalAlign.
     * @private
     * @param {?} pos
     * @return {?}
     */
    _validateHorizontalAlign(pos) {
        if (VALID_HORIZ_ALIGN.indexOf(pos) === -1) {
            throw getInvalidHorizontalAlignError(pos);
        }
    }
    /**
     * Throws an error if the alignment is not a valid verticalAlign.
     * @private
     * @param {?} pos
     * @return {?}
     */
    _validateVerticalAlign(pos) {
        if (VALID_VERT_ALIGN.indexOf(pos) === -1) {
            throw getInvalidVerticalAlignError(pos);
        }
    }
    /**
     * Throws an error if the scroll strategy is not a valid strategy.
     * @private
     * @param {?} strategy
     * @return {?}
     */
    _validateScrollStrategy(strategy) {
        if (VALID_SCROLL.indexOf(strategy) === -1) {
            throw getInvalidScrollStrategyError(strategy);
        }
    }
}
SatPopover.decorators = [
    { type: Component, args: [{
                selector: 'sat-popover',
                encapsulation: ViewEncapsulation.None,
                animations: [transformPopover],
                template: "<ng-template>\n  <div class=\"sat-popover-container\"\n      #focusTrapElement\n      [ngClass]=\"_classList\"\n      [@transformPopover]=\"_getAnimation()\"\n      (@transformPopover.done)=\"_onAnimationDone($event)\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n",
                providers: [SatPopoverAnchoringService],
                styles: [".cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:flex;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:1000;display:flex;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}.sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}.sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}.sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}[dir=rtl] .sat-popover-container.sat-popover-before.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}.sat-popover-container.sat-popover-center.sat-popover-above{-webkit-transform-origin:center bottom;transform-origin:center bottom}.sat-popover-container.sat-popover-center.sat-popover-below{-webkit-transform-origin:center top;transform-origin:center top}.sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:left bottom;transform-origin:left bottom}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-above{-webkit-transform-origin:right bottom;transform-origin:right bottom}.sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:left center;transform-origin:left center}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-center{-webkit-transform-origin:right center;transform-origin:right center}.sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl] .sat-popover-container.sat-popover-after.sat-popover-below{-webkit-transform-origin:right top;transform-origin:right top}"]
            }] }
];
/** @nocollapse */
SatPopover.ctorParameters = () => [
    { type: FocusTrapFactory },
    { type: SatPopoverAnchoringService },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
SatPopover.propDecorators = {
    anchor: [{ type: Input }],
    horizontalAlign: [{ type: Input }],
    xAlign: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    yAlign: [{ type: Input }],
    forceAlignment: [{ type: Input }],
    lockAlignment: [{ type: Input }],
    autoFocus: [{ type: Input }],
    restoreFocus: [{ type: Input }],
    scrollStrategy: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    interactiveClose: [{ type: Input }],
    openTransition: [{ type: Input }],
    closeTransition: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    afterOpen: [{ type: Output }],
    afterClose: [{ type: Output }],
    backdropClicked: [{ type: Output }],
    overlayKeydown: [{ type: Output }],
    _templateRef: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    _focusTrapElement: [{ type: ViewChild, args: ['focusTrapElement', { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._anchor;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._horizontalAlign;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._verticalAlign;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._forceAlignment;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._lockAlignment;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._autoFocus;
    /** @type {?} */
    SatPopover.prototype._autoFocusOverride;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._restoreFocus;
    /** @type {?} */
    SatPopover.prototype._restoreFocusOverride;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._hasBackdrop;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._interactiveClose;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._openTransition;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._closeTransition;
    /**
     * Optional backdrop class.
     * @type {?}
     */
    SatPopover.prototype.backdropClass;
    /**
     * Emits when the popover is opened.
     * @type {?}
     */
    SatPopover.prototype.opened;
    /**
     * Emits when the popover is closed.
     * @type {?}
     */
    SatPopover.prototype.closed;
    /**
     * Emits when the popover has finished opening.
     * @type {?}
     */
    SatPopover.prototype.afterOpen;
    /**
     * Emits when the popover has finished closing.
     * @type {?}
     */
    SatPopover.prototype.afterClose;
    /**
     * Emits when the backdrop is clicked.
     * @type {?}
     */
    SatPopover.prototype.backdropClicked;
    /**
     * Emits when a keydown event is targeted to this popover's overlay.
     * @type {?}
     */
    SatPopover.prototype.overlayKeydown;
    /**
     * Reference to template so it can be placed within a portal.
     * @type {?}
     */
    SatPopover.prototype._templateRef;
    /**
     * Classes to be added to the popover for setting the correct transform origin.
     * @type {?}
     */
    SatPopover.prototype._classList;
    /**
     * Whether the popover is presently open.
     * @type {?}
     */
    SatPopover.prototype._open;
    /**
     * \@internal
     * @type {?}
     */
    SatPopover.prototype._anchoringService;
    /**
     * Reference to the element to build a focus trap around.
     * @type {?}
     * @private
     */
    SatPopover.prototype._focusTrapElement;
    /**
     * Reference to the element that was focused before opening.
     * @type {?}
     * @private
     */
    SatPopover.prototype._previouslyFocusedElement;
    /**
     * Reference to a focus trap around the popover.
     * @type {?}
     * @private
     */
    SatPopover.prototype._focusTrap;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._focusTrapFactory;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    SatPopover.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,