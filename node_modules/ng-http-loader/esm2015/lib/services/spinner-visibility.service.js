import { __decorate } from "tslib";
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { PendingRequestsInterceptor } from './pending-requests-interceptor.service';
import * as i0 from "@angular/core";
import * as i1 from "./pending-requests-interceptor.service";
let SpinnerVisibilityService = class SpinnerVisibilityService {
    constructor(pendingRequestsInterceptor) {
        this.pendingRequestsInterceptor = pendingRequestsInterceptor;
        this._visibility$ = new ReplaySubject(1);
    }
    get visibility$() {
        return this._visibility$.asObservable();
    }
    show() {
        this.pendingRequestsInterceptor.forceByPass = true;
        this._visibility$.next(true);
    }
    hide() {
        this._visibility$.next(false);
        this.pendingRequestsInterceptor.forceByPass = false;
    }
};
SpinnerVisibilityService.ctorParameters = () => [
    { type: PendingRequestsInterceptor }
];
SpinnerVisibilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SpinnerVisibilityService_Factory() { return new SpinnerVisibilityService(i0.ɵɵinject(i1.PendingRequestsInterceptor)); }, token: SpinnerVisibilityService, providedIn: "root" });
SpinnerVisibilityService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], SpinnerVisibilityService);
export { SpinnerVisibilityService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci12aXNpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zcGlubmVyLXZpc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7R0FPRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQzs7O0FBS3BGLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBSWpDLFlBQW9CLDBCQUFzRDtRQUF0RCwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBRmxFLGlCQUFZLEdBQUcsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDLENBQUM7SUFHckQsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDeEQsQ0FBQztDQUNKLENBQUE7O1lBaEJtRCwwQkFBMEI7OztBQUpqRSx3QkFBd0I7SUFIcEMsVUFBVSxDQUFDO1FBQ1IsVUFBVSxFQUFFLE1BQU07S0FDckIsQ0FBQztHQUNXLHdCQUF3QixDQW9CcEM7U0FwQlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3IgfSBmcm9tICcuL3BlbmRpbmctcmVxdWVzdHMtaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU3Bpbm5lclZpc2liaWxpdHlTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX3Zpc2liaWxpdHkkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBlbmRpbmdSZXF1ZXN0c0ludGVyY2VwdG9yOiBQZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvcikge1xuICAgIH1cblxuICAgIGdldCB2aXNpYmlsaXR5JCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2liaWxpdHkkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0c0ludGVyY2VwdG9yLmZvcmNlQnlQYXNzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eSQubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eSQubmV4dChmYWxzZSk7XG4gICAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3IuZm9yY2VCeVBhc3MgPSBmYWxzZTtcbiAgICB9XG59XG4iXX0=