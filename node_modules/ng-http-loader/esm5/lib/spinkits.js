/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { SkChasingDotsComponent } from './components/sk-chasing-dots/sk-chasing-dots.component';
import { SkCubeGridComponent } from './components/sk-cube-grid/sk-cube-grid.component';
import { SkDoubleBounceComponent } from './components/sk-double-bounce/sk-double-bounce.component';
import { SkRotatingPlaneComponent } from './components/sk-rotating-plane/sk-rotating-plane.component';
import { SkSpinnerPulseComponent } from './components/sk-spinner-pulse/sk-spinner-pulse.component';
import { SkThreeBounceComponent } from './components/sk-three-bounce/sk-three-bounce.component';
import { SkWanderingCubesComponent } from './components/sk-wandering-cubes/sk-wandering-cubes.component';
import { SkWaveComponent } from './components/sk-wave/sk-wave.component';
export var Spinkit = {
    skChasingDots: 'sk-chasing-dots',
    skCubeGrid: 'sk-cube-grid',
    skDoubleBounce: 'sk-double-bounce',
    skRotatingPlane: 'sk-rotationg-plane',
    skSpinnerPulse: 'sk-spinner-pulse',
    skThreeBounce: 'sk-three-bounce',
    skWanderingCubes: 'sk-wandering-cubes',
    skWave: 'sk-wave',
};
export var SPINKIT_COMPONENTS = [
    SkCubeGridComponent,
    SkChasingDotsComponent,
    SkDoubleBounceComponent,
    SkRotatingPlaneComponent,
    SkSpinnerPulseComponent,
    SkThreeBounceComponent,
    SkWanderingCubesComponent,
    SkWaveComponent,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpbmtpdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9zcGlua2l0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztHQU9HO0FBRUgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDaEcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDbkcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDdEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDbkcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDaEcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sOERBQThELENBQUM7QUFDekcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRztJQUNuQixhQUFhLEVBQUUsaUJBQWlCO0lBQ2hDLFVBQVUsRUFBRSxjQUFjO0lBQzFCLGNBQWMsRUFBRSxrQkFBa0I7SUFDbEMsZUFBZSxFQUFFLG9CQUFvQjtJQUNyQyxjQUFjLEVBQUUsa0JBQWtCO0lBQ2xDLGFBQWEsRUFBRSxpQkFBaUI7SUFDaEMsZ0JBQWdCLEVBQUUsb0JBQW9CO0lBQ3RDLE1BQU0sRUFBRSxTQUFTO0NBQ3BCLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRztJQUM5QixtQkFBbUI7SUFDbkIsc0JBQXNCO0lBQ3RCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0Qix5QkFBeUI7SUFDekIsZUFBZTtDQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgU2tDaGFzaW5nRG90c0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zay1jaGFzaW5nLWRvdHMvc2stY2hhc2luZy1kb3RzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTa0N1YmVHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NrLWN1YmUtZ3JpZC9zay1jdWJlLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IFNrRG91YmxlQm91bmNlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NrLWRvdWJsZS1ib3VuY2Uvc2stZG91YmxlLWJvdW5jZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2tSb3RhdGluZ1BsYW5lQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NrLXJvdGF0aW5nLXBsYW5lL3NrLXJvdGF0aW5nLXBsYW5lLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTa1NwaW5uZXJQdWxzZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zay1zcGlubmVyLXB1bHNlL3NrLXNwaW5uZXItcHVsc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFNrVGhyZWVCb3VuY2VDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2stdGhyZWUtYm91bmNlL3NrLXRocmVlLWJvdW5jZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2tXYW5kZXJpbmdDdWJlc0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zay13YW5kZXJpbmctY3ViZXMvc2std2FuZGVyaW5nLWN1YmVzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTa1dhdmVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2std2F2ZS9zay13YXZlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBTcGlua2l0ID0ge1xuICAgIHNrQ2hhc2luZ0RvdHM6ICdzay1jaGFzaW5nLWRvdHMnLFxuICAgIHNrQ3ViZUdyaWQ6ICdzay1jdWJlLWdyaWQnLFxuICAgIHNrRG91YmxlQm91bmNlOiAnc2stZG91YmxlLWJvdW5jZScsXG4gICAgc2tSb3RhdGluZ1BsYW5lOiAnc2stcm90YXRpb25nLXBsYW5lJyxcbiAgICBza1NwaW5uZXJQdWxzZTogJ3NrLXNwaW5uZXItcHVsc2UnLFxuICAgIHNrVGhyZWVCb3VuY2U6ICdzay10aHJlZS1ib3VuY2UnLFxuICAgIHNrV2FuZGVyaW5nQ3ViZXM6ICdzay13YW5kZXJpbmctY3ViZXMnLFxuICAgIHNrV2F2ZTogJ3NrLXdhdmUnLFxufTtcblxuZXhwb3J0IGNvbnN0IFNQSU5LSVRfQ09NUE9ORU5UUyA9IFtcbiAgICBTa0N1YmVHcmlkQ29tcG9uZW50LFxuICAgIFNrQ2hhc2luZ0RvdHNDb21wb25lbnQsXG4gICAgU2tEb3VibGVCb3VuY2VDb21wb25lbnQsXG4gICAgU2tSb3RhdGluZ1BsYW5lQ29tcG9uZW50LFxuICAgIFNrU3Bpbm5lclB1bHNlQ29tcG9uZW50LFxuICAgIFNrVGhyZWVCb3VuY2VDb21wb25lbnQsXG4gICAgU2tXYW5kZXJpbmdDdWJlc0NvbXBvbmVudCxcbiAgICBTa1dhdmVDb21wb25lbnQsXG5dO1xuIl19