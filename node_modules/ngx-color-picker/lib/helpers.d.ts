import { EventEmitter, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type ColorMode = 'color' | 'c' | '1' | 'grayscale' | 'g' | '2' | 'presets' | 'p' | '3';
export declare type AlphaChannel = 'enabled' | 'disabled' | 'always' | 'forced';
export declare type OutputFormat = 'auto' | 'hex' | 'rgba' | 'hsla';
export declare function detectIE(): boolean | number;
export declare class TextDirective {
    rg: number;
    text: any;
    newValue: EventEmitter<any>;
    inputChange(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TextDirective, "[text]", never, {
    "rg": "rg";
    "text": "text";
}, {
    "newValue": "newValue";
}, never>;
}
export declare class SliderDirective {
    private elRef;
    private listenerMove;
    private listenerStop;
    rgX: number;
    rgY: number;
    slider: string;
    dragEnd: EventEmitter<any>;
    dragStart: EventEmitter<any>;
    newValue: EventEmitter<any>;
    mouseDown(event: any): void;
    touchStart(event: any): void;
    constructor(elRef: ElementRef);
    private move;
    private start;
    private stop;
    private getX;
    private getY;
    private setCursor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SliderDirective, "[slider]", never, {
    "rgX": "rgX";
    "rgY": "rgY";
    "slider": "slider";
}, {
    "dragEnd": "dragEnd";
    "dragStart": "dragStart";
    "newValue": "newValue";
}, never>;
}
export declare class SliderPosition {
    h: number;
    s: number;
    v: number;
    a: number;
    constructor(h: number, s: number, v: number, a: number);
}
export declare class SliderDimension {
    h: number;
    s: number;
    v: number;
    a: number;
    constructor(h: number, s: number, v: number, a: number);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5kLnRzIiwic291cmNlcyI6WyJoZWxwZXJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIENvbG9yTW9kZSA9ICdjb2xvcicgfCAnYycgfCAnMScgfCAnZ3JheXNjYWxlJyB8ICdnJyB8ICcyJyB8ICdwcmVzZXRzJyB8ICdwJyB8ICczJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQWxwaGFDaGFubmVsID0gJ2VuYWJsZWQnIHwgJ2Rpc2FibGVkJyB8ICdhbHdheXMnIHwgJ2ZvcmNlZCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE91dHB1dEZvcm1hdCA9ICdhdXRvJyB8ICdoZXgnIHwgJ3JnYmEnIHwgJ2hzbGEnO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZGV0ZWN0SUUoKTogYm9vbGVhbiB8IG51bWJlcjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRleHREaXJlY3RpdmUge1xuICAgIHJnOiBudW1iZXI7XG4gICAgdGV4dDogYW55O1xuICAgIG5ld1ZhbHVlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpbnB1dENoYW5nZShldmVudDogYW55KTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlckRpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBwcml2YXRlIGxpc3RlbmVyTW92ZTtcbiAgICBwcml2YXRlIGxpc3RlbmVyU3RvcDtcbiAgICByZ1g6IG51bWJlcjtcbiAgICByZ1k6IG51bWJlcjtcbiAgICBzbGlkZXI6IHN0cmluZztcbiAgICBkcmFnRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkcmFnU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5ld1ZhbHVlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBtb3VzZURvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG91Y2hTdGFydChldmVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbFJlZjogRWxlbWVudFJlZik7XG4gICAgcHJpdmF0ZSBtb3ZlO1xuICAgIHByaXZhdGUgc3RhcnQ7XG4gICAgcHJpdmF0ZSBzdG9wO1xuICAgIHByaXZhdGUgZ2V0WDtcbiAgICBwcml2YXRlIGdldFk7XG4gICAgcHJpdmF0ZSBzZXRDdXJzb3I7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJQb3NpdGlvbiB7XG4gICAgaDogbnVtYmVyO1xuICAgIHM6IG51bWJlcjtcbiAgICB2OiBudW1iZXI7XG4gICAgYTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGg6IG51bWJlciwgczogbnVtYmVyLCB2OiBudW1iZXIsIGE6IG51bWJlcik7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJEaW1lbnNpb24ge1xuICAgIGg6IG51bWJlcjtcbiAgICBzOiBudW1iZXI7XG4gICAgdjogbnVtYmVyO1xuICAgIGE6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihoOiBudW1iZXIsIHM6IG51bWJlciwgdjogbnVtYmVyLCBhOiBudW1iZXIpO1xufVxuIl19