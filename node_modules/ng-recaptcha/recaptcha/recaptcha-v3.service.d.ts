import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const RECAPTCHA_V3_SITE_KEY: InjectionToken<string>;
export interface OnExecuteData {
    /**
     * The name of the action that has been executed.
     */
    action: string;
    /**
     * The token that reCAPTCHA v3 provided when executing the action.
     */
    token: string;
}
/**
 * The main service for working with reCAPTCHA v3 APIs.
 *
 * Use the `execute` method for executing a single action, and
 * `onExecute` observable for listening to all actions at once.
 */
export declare class ReCaptchaV3Service {
    constructor(zone: NgZone, siteKey: string, platformId: any, baseUrl?: string, nonce?: string);
    readonly onExecute: Observable<OnExecuteData>;
    /**
     * Executes the provided `action` with reCAPTCHA v3 API.
     * Use the emitted token value for verification purposes on the backend.
     *
     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at
     * https://developers.google.com/recaptcha/docs/v3.
     *
     * @param {string} action the action to execute
     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.
     * The returned `Observable` completes immediately after emitting a value.
     */
    execute(action: string): Observable<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReCaptchaV3Service>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ReCaptchaV3Service>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLXYzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicmVjYXB0Y2hhLXYzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBSRUNBUFRDSEFfVjNfU0lURV9LRVk6IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgaW50ZXJmYWNlIE9uRXhlY3V0ZURhdGEge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBhY3Rpb24gdGhhdCBoYXMgYmVlbiBleGVjdXRlZC5cbiAgICAgKi9cbiAgICBhY3Rpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdG9rZW4gdGhhdCByZUNBUFRDSEEgdjMgcHJvdmlkZWQgd2hlbiBleGVjdXRpbmcgdGhlIGFjdGlvbi5cbiAgICAgKi9cbiAgICB0b2tlbjogc3RyaW5nO1xufVxuLyoqXG4gKiBUaGUgbWFpbiBzZXJ2aWNlIGZvciB3b3JraW5nIHdpdGggcmVDQVBUQ0hBIHYzIEFQSXMuXG4gKlxuICogVXNlIHRoZSBgZXhlY3V0ZWAgbWV0aG9kIGZvciBleGVjdXRpbmcgYSBzaW5nbGUgYWN0aW9uLCBhbmRcbiAqIGBvbkV4ZWN1dGVgIG9ic2VydmFibGUgZm9yIGxpc3RlbmluZyB0byBhbGwgYWN0aW9ucyBhdCBvbmNlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZUNhcHRjaGFWM1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgc2l0ZUtleTogc3RyaW5nLCBwbGF0Zm9ybUlkOiBhbnksIGJhc2VVcmw/OiBzdHJpbmcsIG5vbmNlPzogc3RyaW5nKTtcbiAgICByZWFkb25seSBvbkV4ZWN1dGU6IE9ic2VydmFibGU8T25FeGVjdXRlRGF0YT47XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBhY3Rpb25gIHdpdGggcmVDQVBUQ0hBIHYzIEFQSS5cbiAgICAgKiBVc2UgdGhlIGVtaXR0ZWQgdG9rZW4gdmFsdWUgZm9yIHZlcmlmaWNhdGlvbiBwdXJwb3NlcyBvbiB0aGUgYmFja2VuZC5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHJlQ0FQVENIQSB2MyBhY3Rpb25zIGFuZCB0b2tlbnMgcmVmZXIgdG8gdGhlIG9mZmljaWFsIGRvY3VtZW50YXRpb24gYXRcbiAgICAgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZG9jcy92My5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb24gdGhlIGFjdGlvbiB0byBleGVjdXRlXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn0gYW4gYE9ic2VydmFibGVgIHRoYXQgd2lsbCBlbWl0IHRoZSByZUNBUFRDSEEgdjMgc3RyaW5nIGB0b2tlbmAgdmFsdWUgd2hlbmV2ZXIgcmVhZHkuXG4gICAgICogVGhlIHJldHVybmVkIGBPYnNlcnZhYmxlYCBjb21wbGV0ZXMgaW1tZWRpYXRlbHkgYWZ0ZXIgZW1pdHRpbmcgYSB2YWx1ZS5cbiAgICAgKi9cbiAgICBleGVjdXRlKGFjdGlvbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xufVxuIl19